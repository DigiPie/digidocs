{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DigiDocs Hi, I created this website on 20 Dec 17 to document what I learn for easy referencing in the future. Most recent course HarvardX's Data Science: R Basics Enrolled from 4 Dec 17 to 21 Jan 18 This website is maintained by Evan Tay , a Computer Science undergraduate at the National University of Singapore.","title":"Home"},{"location":"#welcome-to-digidocs","text":"Hi, I created this website on 20 Dec 17 to document what I learn for easy referencing in the future. Most recent course HarvardX's Data Science: R Basics Enrolled from 4 Dec 17 to 21 Jan 18 This website is maintained by Evan Tay , a Computer Science undergraduate at the National University of Singapore.","title":"Welcome to DigiDocs"},{"location":"RBasics/","text":"R Basics / Introduction Last updated on 21 Jan 18 In this section you will find my documentation of basic R programming knowledge picked up while taking the HarvardX's Data Science: R Basics course. I started the course on 4 Dec 17 and completed it on 21 Jan 18. Glossary Week * Title Remarks 1 Functions and data access This section covers commonly-used R functions and data access via the $ sign. 2.1 Vectors and Subsetting This section covers vector manipulation and specific access of entries in a vector via subsetting. 2.2 Sort, Order and Rank This section covers sorting, ordering and ranking of vectors. 2.2 Data Frame and Coercion This section covers Data Frame, Coercion and NA values. 2.3 and 3.1 Vector Arithmetic This section covers vector arithmetic and indexing. 3.2 Data Manipulation This section covers data manipulation using dplyr package's mutate , filter and select functions, and % % operator. 3.3 Basic Plotting This sections covers basic plotting of data using scatter plots, histograms and box plots. 4 R Programming This section covers basic R programming features such as if-else statements, for loops and function definitions. * Week corresponds to HarvardX's Data Science: R Basics' curriculum","title":"Introduction"},{"location":"RBasics/#r-basics-introduction","text":"Last updated on 21 Jan 18 In this section you will find my documentation of basic R programming knowledge picked up while taking the HarvardX's Data Science: R Basics course. I started the course on 4 Dec 17 and completed it on 21 Jan 18.","title":"R Basics / Introduction"},{"location":"RBasics/#glossary","text":"Week * Title Remarks 1 Functions and data access This section covers commonly-used R functions and data access via the $ sign. 2.1 Vectors and Subsetting This section covers vector manipulation and specific access of entries in a vector via subsetting. 2.2 Sort, Order and Rank This section covers sorting, ordering and ranking of vectors. 2.2 Data Frame and Coercion This section covers Data Frame, Coercion and NA values. 2.3 and 3.1 Vector Arithmetic This section covers vector arithmetic and indexing. 3.2 Data Manipulation This section covers data manipulation using dplyr package's mutate , filter and select functions, and % % operator. 3.3 Basic Plotting This sections covers basic plotting of data using scatter plots, histograms and box plots. 4 R Programming This section covers basic R programming features such as if-else statements, for loops and function definitions. * Week corresponds to HarvardX's Data Science: R Basics' curriculum","title":"Glossary"},{"location":"RBasics1/","text":"R Basics / Functions and data access Last updated on 21 Jan 18 This section covers commonly-used R functions and also data access via the $ sign. Functions To execute a function add parentheses () behind the function's name. If the parentheses are absent, the function's code is displayed instead of being executed. Use args(x) or help(\"x\") to get information on the arguments of a function x . Arguments with default values are optional. args(x) : Returns function x 's arguments. help(\"x\") : Returns function x 's manual ?x : Shortform operator of help(\"x\") which works for most functions. Determine object type class(x) : Returns object x 's type ( character , numeric , logical , etc.). str(x) : Returns object x 's type, observations and variables (if any). identical(a, b) : Returns TRUE if identical; FALSE otherwise. Data frame functions What is a Data Frame? Conceptually a data frame is a table. head(x) : Returns the first six lines of data frame x . names(x) : Returns the names of variables in data frame x . Vector functions What is a Vector? A vector is a sequence of data elements of the same basic type. length(x) : Returns the number of entries in vector x . table(x) : Returns the frequency of unique elements in vector x . Factor function What is a Factor? A factor in R is a vector of integer values with a corresponding set of character values used when the factor is displayed. It is also known as enumerated type . levels(x) : Returns factor x 's levels (the possible values of x ). Workspace functions data() : Returns pre-built data sets for practice. ls() : Returns objects in the workspace. Data access Use the $ sign to access data. A vector of entries is returned. vectorA - dataFrame$variableA Alternatively, use [[]] . vectorA - dataFrame[[variableA]] The order of entries are preserved when they are accessed as such. Using [] instead of [[]] Note that if you only use [] , you will return a subset of the original data as a data frame.","title":"Functions and data access"},{"location":"RBasics1/#r-basics-functions-and-data-access","text":"Last updated on 21 Jan 18 This section covers commonly-used R functions and also data access via the $ sign.","title":"R Basics / Functions and data access"},{"location":"RBasics1/#functions","text":"To execute a function add parentheses () behind the function's name. If the parentheses are absent, the function's code is displayed instead of being executed. Use args(x) or help(\"x\") to get information on the arguments of a function x . Arguments with default values are optional. args(x) : Returns function x 's arguments. help(\"x\") : Returns function x 's manual ?x : Shortform operator of help(\"x\") which works for most functions.","title":"Functions"},{"location":"RBasics1/#determine-object-type","text":"class(x) : Returns object x 's type ( character , numeric , logical , etc.). str(x) : Returns object x 's type, observations and variables (if any). identical(a, b) : Returns TRUE if identical; FALSE otherwise.","title":"Determine object type"},{"location":"RBasics1/#data-frame-functions","text":"What is a Data Frame? Conceptually a data frame is a table. head(x) : Returns the first six lines of data frame x . names(x) : Returns the names of variables in data frame x .","title":"Data frame functions"},{"location":"RBasics1/#vector-functions","text":"What is a Vector? A vector is a sequence of data elements of the same basic type. length(x) : Returns the number of entries in vector x . table(x) : Returns the frequency of unique elements in vector x .","title":"Vector functions"},{"location":"RBasics1/#factor-function","text":"What is a Factor? A factor in R is a vector of integer values with a corresponding set of character values used when the factor is displayed. It is also known as enumerated type . levels(x) : Returns factor x 's levels (the possible values of x ).","title":"Factor function"},{"location":"RBasics1/#workspace-functions","text":"data() : Returns pre-built data sets for practice. ls() : Returns objects in the workspace.","title":"Workspace functions"},{"location":"RBasics1/#data-access","text":"Use the $ sign to access data. A vector of entries is returned. vectorA - dataFrame$variableA Alternatively, use [[]] . vectorA - dataFrame[[variableA]] The order of entries are preserved when they are accessed as such. Using [] instead of [[]] Note that if you only use [] , you will return a subset of the original data as a data frame.","title":"Data access"},{"location":"RBasics2/","text":"R Basics / Vectors and Subsetting Last updated on 21 Jan 18 This section covers vector manipulation and specific access of entries in a vector via subsetting. Creating Vectors c Use the function c which stands for concatenation. codes - c(65, 60, 62) countries - c( Singapore , Malaysia , Indonesia ) countryCodes - c(Singapore=65,Malaysia=60,Indonesia=62) # Still numeric countryCodes - c( Singapore =65, Malaysia =60, Indonesia =62) # Same as previous seq Use the function seq which stands for sequence. Simplest sequence generation seq(1, 4) [1] 1 2 3 4 Sequence generation with increment defined using the by argument. seq(1, 6, 2) # Third argument is the `by` argument [1] 1 3 5 Shorthand operator 1:4 # Shorthand for consecutive integers [1] 1 2 3 4 Sequence generation with length defined using the length.out argument. fourNo - seq(1, 3, length.out = 4) # Create 4 numbers between 1 and 3. fourNo [1] 1.000000 1.666667 2.333333 3.000000 Naming vectors names(x) - y : Assigns names to a vector x's entries using vector y's entries. For example: names(codes) - countries produces a vector identical to countryCodes . Subsetting Access specific parts of a vector via subsetting. Single entry codes[2] # Access second entry Malaysia 60 Multiple specific entries codes[c(1,3)] # Access first and third entry Singapore Indonesia 65 62 codes[c( Indonesia , Malaysia )] # Access by names Indonesia Malaysia 62 60 Multiple consecutive entries codes[1:2] # Access first to second entry Singapore Malaysia 65 60","title":"Vectors and Subsetting"},{"location":"RBasics2/#r-basics-vectors-and-subsetting","text":"Last updated on 21 Jan 18 This section covers vector manipulation and specific access of entries in a vector via subsetting.","title":"R Basics / Vectors and Subsetting"},{"location":"RBasics2/#creating-vectors","text":"","title":"Creating Vectors"},{"location":"RBasics2/#c","text":"Use the function c which stands for concatenation. codes - c(65, 60, 62) countries - c( Singapore , Malaysia , Indonesia ) countryCodes - c(Singapore=65,Malaysia=60,Indonesia=62) # Still numeric countryCodes - c( Singapore =65, Malaysia =60, Indonesia =62) # Same as previous","title":"c"},{"location":"RBasics2/#seq","text":"Use the function seq which stands for sequence. Simplest sequence generation seq(1, 4) [1] 1 2 3 4 Sequence generation with increment defined using the by argument. seq(1, 6, 2) # Third argument is the `by` argument [1] 1 3 5 Shorthand operator 1:4 # Shorthand for consecutive integers [1] 1 2 3 4 Sequence generation with length defined using the length.out argument. fourNo - seq(1, 3, length.out = 4) # Create 4 numbers between 1 and 3. fourNo [1] 1.000000 1.666667 2.333333 3.000000","title":"seq"},{"location":"RBasics2/#naming-vectors","text":"names(x) - y : Assigns names to a vector x's entries using vector y's entries. For example: names(codes) - countries produces a vector identical to countryCodes .","title":"Naming vectors"},{"location":"RBasics2/#subsetting","text":"Access specific parts of a vector via subsetting.","title":"Subsetting"},{"location":"RBasics2/#single-entry","text":"codes[2] # Access second entry Malaysia 60","title":"Single entry"},{"location":"RBasics2/#multiple-specific-entries","text":"codes[c(1,3)] # Access first and third entry Singapore Indonesia 65 62 codes[c( Indonesia , Malaysia )] # Access by names Indonesia Malaysia 62 60","title":"Multiple specific entries"},{"location":"RBasics2/#multiple-consecutive-entries","text":"codes[1:2] # Access first to second entry Singapore Malaysia 65 60","title":"Multiple consecutive entries"},{"location":"RBasics3/","text":"R Basics / Sort, Order and Rank Last updated on 21 Jan 18 This section covers sorting, ordering and ranking of vectors. sort The function sort(x) , sorts vector x in ascending order. data(USArrests) sort(USArrests$Murder) [1] 0.8 2.1 2.1 2.2 2.2 2.6 2.6... order The function order(x) returns the indices which sorts the vector x . x - c(100, 1, 10) order(x) [1] 2 3 1 The first entry of order(x) is 2 because the 2nd entry in vector x is the smallest value. murders - USArrests$Murder x - order(murders) # Get indices which sort murders in ascending order. states - rownames(USArrests) # Get names of states states[x] # Output names of states sorted by murders in ascending order. [1] North Dakota Maine New Hampshire ... [50] Georgia # North Dakota has the least murders while Georgia has the most. max and min Use max(x) and min(x) along with which.max(x) and which.min(x) functions if you only need the maximum and minimum values. max(murders) [1] 17.4 y - which.max(murders) states[y] [1] Georgia rank The function rank(x) returns a vector which entries store the ranking of their corresponding entries in vector x . x - c(100, 1, 10) order(x) [1] 2 3 1 rank(x) # Entries ranked lowest to highest [1] 3 1 2 rank(-x) # Entries ranked highest to lowest [1] 1 3 2 The second entry of rank(x) is 1 because the second entry in vector x is the smallest value and hence has the lowest rank value.","title":"Sort, Order and Rank"},{"location":"RBasics3/#r-basics-sort-order-and-rank","text":"Last updated on 21 Jan 18 This section covers sorting, ordering and ranking of vectors.","title":"R Basics / Sort, Order and Rank"},{"location":"RBasics3/#sort","text":"The function sort(x) , sorts vector x in ascending order. data(USArrests) sort(USArrests$Murder) [1] 0.8 2.1 2.1 2.2 2.2 2.6 2.6...","title":"sort"},{"location":"RBasics3/#order","text":"The function order(x) returns the indices which sorts the vector x . x - c(100, 1, 10) order(x) [1] 2 3 1 The first entry of order(x) is 2 because the 2nd entry in vector x is the smallest value. murders - USArrests$Murder x - order(murders) # Get indices which sort murders in ascending order. states - rownames(USArrests) # Get names of states states[x] # Output names of states sorted by murders in ascending order. [1] North Dakota Maine New Hampshire ... [50] Georgia # North Dakota has the least murders while Georgia has the most.","title":"order"},{"location":"RBasics3/#max-and-min","text":"Use max(x) and min(x) along with which.max(x) and which.min(x) functions if you only need the maximum and minimum values. max(murders) [1] 17.4 y - which.max(murders) states[y] [1] Georgia","title":"max and min"},{"location":"RBasics3/#rank","text":"The function rank(x) returns a vector which entries store the ranking of their corresponding entries in vector x . x - c(100, 1, 10) order(x) [1] 2 3 1 rank(x) # Entries ranked lowest to highest [1] 3 1 2 rank(-x) # Entries ranked highest to lowest [1] 1 3 2 The second entry of rank(x) is 1 because the second entry in vector x is the smallest value and hence has the lowest rank value.","title":"rank"},{"location":"RBasics4/","text":"R Basics / Data Frame and Coercion Last updated on 21 Jan 18 This section covers Data Frame, Coercion and NA values. Data Frame creation data.frame The function data.frame(...) is used to create a new data frame. states - row.names(USArrests) ranks - rank(USArrests$Murder) StatesWithRank - data.frame(name = states, rank = ranks) head(StatesWithRank) name rank 1 Alabama 44.5 2 Alaska 35.0 3 Arizona 29.0 4 Arkansas 31.0 5 California 32.5 6 Colorado 28.0 ind - order(USArrests$Murder) StatesWithRankOrdered - data.frame(name = states[ind], rank = ranks[ind]) head(StatesWithRankOrdered) name rank 1 North Dakota 1.0 2 Maine 2.5 3 New Hampshire 2.5 4 Iowa 4.5 5 Vermont 4.5 6 Idaho 6.5 Coercion When an entry's type is not what is expected, R will attempt to coerce it into the expected type. fibonacci - c(1, one , 2, 3) [1] 1 one 2 3 class(fibonacci) [1] character Explicit Coercion Explicitly coerce values using the as functions. as.character(x) : Coerce vector x's entries into characters. Example: y - as.character(c(1:5)) . as.numeric(x) : Coerce vector x's entries into numbers. Missing data In R, missing values are represented by the symbol NA which stands for 'Not Available'. When coercion fails, R will return a warning and set the values which failed coercion to NA . z - as.numeric(c(1, b , 3)) Warning message: NAs introduced by coercion z [1] 1 NA 3 Using Integers integer occupies lesser space in memory than numeric . Append L to a number to create an integer. Example: class(3L) returns [1] \"integer\" . Dealing with NA values You can due with NA values using the boolean NOT operator / negation operator ! . numbers - c(1.0, 'b', 2.5, 3.33) numbers - as.numeric(numbers) Warning message: NAs introduced by coercion mean(numbers) [1] NA numbers [1] 1.00 NA 2.50 3.33 ind = is.na(numbers) # Get index(s) of NA values mean(numbers[!ind]) # !ind returns index(s) of non-NA values [1] 2.276667","title":"Data Frame and Coercion"},{"location":"RBasics4/#r-basics-data-frame-and-coercion","text":"Last updated on 21 Jan 18 This section covers Data Frame, Coercion and NA values.","title":"R Basics / Data Frame and Coercion"},{"location":"RBasics4/#data-frame-creation","text":"","title":"Data Frame creation"},{"location":"RBasics4/#dataframe","text":"The function data.frame(...) is used to create a new data frame. states - row.names(USArrests) ranks - rank(USArrests$Murder) StatesWithRank - data.frame(name = states, rank = ranks) head(StatesWithRank) name rank 1 Alabama 44.5 2 Alaska 35.0 3 Arizona 29.0 4 Arkansas 31.0 5 California 32.5 6 Colorado 28.0 ind - order(USArrests$Murder) StatesWithRankOrdered - data.frame(name = states[ind], rank = ranks[ind]) head(StatesWithRankOrdered) name rank 1 North Dakota 1.0 2 Maine 2.5 3 New Hampshire 2.5 4 Iowa 4.5 5 Vermont 4.5 6 Idaho 6.5","title":"data.frame"},{"location":"RBasics4/#coercion","text":"When an entry's type is not what is expected, R will attempt to coerce it into the expected type. fibonacci - c(1, one , 2, 3) [1] 1 one 2 3 class(fibonacci) [1] character","title":"Coercion"},{"location":"RBasics4/#explicit-coercion","text":"Explicitly coerce values using the as functions. as.character(x) : Coerce vector x's entries into characters. Example: y - as.character(c(1:5)) . as.numeric(x) : Coerce vector x's entries into numbers. Missing data In R, missing values are represented by the symbol NA which stands for 'Not Available'. When coercion fails, R will return a warning and set the values which failed coercion to NA . z - as.numeric(c(1, b , 3)) Warning message: NAs introduced by coercion z [1] 1 NA 3 Using Integers integer occupies lesser space in memory than numeric . Append L to a number to create an integer. Example: class(3L) returns [1] \"integer\" .","title":"Explicit Coercion"},{"location":"RBasics4/#dealing-with-na-values","text":"You can due with NA values using the boolean NOT operator / negation operator ! . numbers - c(1.0, 'b', 2.5, 3.33) numbers - as.numeric(numbers) Warning message: NAs introduced by coercion mean(numbers) [1] NA numbers [1] 1.00 NA 2.50 3.33 ind = is.na(numbers) # Get index(s) of NA values mean(numbers[!ind]) # !ind returns index(s) of non-NA values [1] 2.276667","title":"Dealing with NA values"},{"location":"RBasics5/","text":"R Basics / Vector Arithmetic Last updated on 21 Jan 18 This section covers vector arithmetic and indexing. Arithmetic operations Arithmetic operations in R apply on every element in a vector. tempInCelsius - c(0, 100, 232.8) tempInFahrenheit - (tempInCelsius * 1.8) + 32 tempInFahrenheit [1] 32.00 212.00 451.04 Arithmetic operators Operator Name Examples + Addition 1 + 1 = 2 - Subtraction 1 - 1 = 0 * Multiplication 2 * 3 = 6 / Division 4 / 2 = 2 ^ or ** Exponentiation 2^2 = 4 %% Modulus 5%%4 = 1 %/% Integer division 7%/%2 = 3 Vector Arithmetic We can perform vector arithmetic on two vectors of the same length. years = c(2014, 2015) citizens = c(3343, 3375) permanentResidents = c(527, 527) years - c(2014, 2015) citizens - c(3343, 3375) permanentResidents - c(527, 527) SGPopulation - data.frame(name = years, citizen = citizens, permanentResident = permanentResidents) SGPopulation name citizen permanentResident 1 2014 3343 527 2 2015 3375 527 SGTotalResidents - SGPopulation$citizen + SGPopulation$permanentResident names(SGTotalResidents) - SGPopulation$name SGTotalResidents 2014 2015 3870 3902 Logical operations Logical (Relational) operations in R apply on every element in a vector. Using logical operations we are able to perform indexing. Logical operators Operator Name == Equal to != Not equal to Less than > Greater than = Less than or equal to >= Greater than or equal to !x Not x x y x AND y x | y x OR y isTRUE(x) Returns TRUE or FALSE Indexing grades - c(43, 73, 23, 95, 55) passing - grades = 50 passing [1] FALSE TRUE FALSE TRUE TRUE grades[passing] [1] 73 95 55 sum(passing) # TRUE evaluates to 1 and FALSE to 0 [1] 3 distinction - grades = 80 merit - passing !distinction # Passing grade but NOT Distinction grades[merit] [1] 73 55 Indexing functions which The function which(x) returns the indices of entries in vector x which are TRUE . # Following previous example distIndex - which(distinction) distIndex # Stores only indices which are TRUE, thus saving space [1] 4 grades[distIndex] [1] 95 notDistIndex - which(!distinction) # ! operator grades[notDistIndex] [1] 43 73 23 55 match The function match(x, y) returns the indices of entries in vector y which (first) matches entries in vector x . countries - c( MYS , SGP , IDN ) codes - c(60, 65, 62) countryCodes - data.frame(name = countries, code - codes) ind - match(c( SGP , IDN ), countryCodes$name) countryCodes$code[ind] [1] 65 62 %in% operator The operator y %in% x returns a logical vector of y length that evaluates TRUE if the entry in y is present in x . # Following previous example c( SGP , LOL ) %in% countryCodes$name [1] TRUE FALSE","title":"Vector Arithmetic"},{"location":"RBasics5/#r-basics-vector-arithmetic","text":"Last updated on 21 Jan 18 This section covers vector arithmetic and indexing.","title":"R Basics / Vector Arithmetic"},{"location":"RBasics5/#arithmetic-operations","text":"Arithmetic operations in R apply on every element in a vector. tempInCelsius - c(0, 100, 232.8) tempInFahrenheit - (tempInCelsius * 1.8) + 32 tempInFahrenheit [1] 32.00 212.00 451.04","title":"Arithmetic operations"},{"location":"RBasics5/#arithmetic-operators","text":"Operator Name Examples + Addition 1 + 1 = 2 - Subtraction 1 - 1 = 0 * Multiplication 2 * 3 = 6 / Division 4 / 2 = 2 ^ or ** Exponentiation 2^2 = 4 %% Modulus 5%%4 = 1 %/% Integer division 7%/%2 = 3","title":"Arithmetic operators"},{"location":"RBasics5/#vector-arithmetic","text":"We can perform vector arithmetic on two vectors of the same length. years = c(2014, 2015) citizens = c(3343, 3375) permanentResidents = c(527, 527) years - c(2014, 2015) citizens - c(3343, 3375) permanentResidents - c(527, 527) SGPopulation - data.frame(name = years, citizen = citizens, permanentResident = permanentResidents) SGPopulation name citizen permanentResident 1 2014 3343 527 2 2015 3375 527 SGTotalResidents - SGPopulation$citizen + SGPopulation$permanentResident names(SGTotalResidents) - SGPopulation$name SGTotalResidents 2014 2015 3870 3902","title":"Vector Arithmetic"},{"location":"RBasics5/#logical-operations","text":"Logical (Relational) operations in R apply on every element in a vector. Using logical operations we are able to perform indexing.","title":"Logical operations"},{"location":"RBasics5/#logical-operators","text":"Operator Name == Equal to != Not equal to Less than > Greater than = Less than or equal to >= Greater than or equal to !x Not x x y x AND y x | y x OR y isTRUE(x) Returns TRUE or FALSE","title":"Logical operators"},{"location":"RBasics5/#indexing","text":"grades - c(43, 73, 23, 95, 55) passing - grades = 50 passing [1] FALSE TRUE FALSE TRUE TRUE grades[passing] [1] 73 95 55 sum(passing) # TRUE evaluates to 1 and FALSE to 0 [1] 3 distinction - grades = 80 merit - passing !distinction # Passing grade but NOT Distinction grades[merit] [1] 73 55","title":"Indexing"},{"location":"RBasics5/#indexing-functions","text":"","title":"Indexing functions"},{"location":"RBasics5/#which","text":"The function which(x) returns the indices of entries in vector x which are TRUE . # Following previous example distIndex - which(distinction) distIndex # Stores only indices which are TRUE, thus saving space [1] 4 grades[distIndex] [1] 95 notDistIndex - which(!distinction) # ! operator grades[notDistIndex] [1] 43 73 23 55","title":"which"},{"location":"RBasics5/#match","text":"The function match(x, y) returns the indices of entries in vector y which (first) matches entries in vector x . countries - c( MYS , SGP , IDN ) codes - c(60, 65, 62) countryCodes - data.frame(name = countries, code - codes) ind - match(c( SGP , IDN ), countryCodes$name) countryCodes$code[ind] [1] 65 62","title":"match"},{"location":"RBasics5/#in-operator","text":"The operator y %in% x returns a logical vector of y length that evaluates TRUE if the entry in y is present in x . # Following previous example c( SGP , LOL ) %in% countryCodes$name [1] TRUE FALSE","title":"%in% operator"},{"location":"RBasics6/","text":"R Basics / Data Manipulation Last updated on 21 Jan 18 This section covers data manipulation using dplyr package's mutate , filter and select functions, and % % operator. dplyr package The dplyr package is a grammar of data manipulation for R. Installation Usage install.packages( dplyr ) library(dplyr) # To load and use mutate The function mutate(...) can be used to create a new column. data(starwars) # From package dplyr starwars - mutate(starwars, bmi = mass / ((height/100) ** 2)) highestBMI - which.max(starwars$bmi) starwars$name[highestBMI] [1] Jabba Desilijic Tiure Reloading from package Reloading datasets from packages will overwrite any changes / mutations applied to them. filter The function filter(...) filters rows. # Following previous example outOfShape - filter(starwars, bmi 30) outOfShape$name [1] R2-D2 Darth Vader Owen Lars R5-D4 Jabba Desilijic Tiure [6] Jek Tono Porkins Yoda IG-88 Bossk Sebulba [11] Dud Bolt Grievous select The function select(...) returns selected columns. # Following previous example fitnessProgram - select(outOfShape, name, mass, height, bmi) fitnessProgram # A tibble: 12 x 4 name mass height bmi chr dbl int dbl 1 R2-D2 32 96 34.72222 2 Darth Vader 136 202 33.33007 3 Owen Lars 120 178 37.87401 4 R5-D4 32 97 34.00999 5 Jabba Desilijic Tiure 1358 175 443.42857 ... Pipe operator: % % The pipe operator % % to pipe the output of one function to the next. # Following previous example starwars % % filter(films == The Force Awakens ) % % select(name, species) # A tibble: 5 x 2 name species chr chr 1 Finn Human 2 Rey Human 3 Poe Dameron Human 4 BB8 Droid 5 Captain Phasma NA","title":"Data Manipulation"},{"location":"RBasics6/#r-basics-data-manipulation","text":"Last updated on 21 Jan 18 This section covers data manipulation using dplyr package's mutate , filter and select functions, and % % operator.","title":"R Basics / Data Manipulation"},{"location":"RBasics6/#dplyr-package","text":"The dplyr package is a grammar of data manipulation for R.","title":"dplyr package"},{"location":"RBasics6/#installation-usage","text":"install.packages( dplyr ) library(dplyr) # To load and use","title":"Installation &amp; Usage"},{"location":"RBasics6/#mutate","text":"The function mutate(...) can be used to create a new column. data(starwars) # From package dplyr starwars - mutate(starwars, bmi = mass / ((height/100) ** 2)) highestBMI - which.max(starwars$bmi) starwars$name[highestBMI] [1] Jabba Desilijic Tiure Reloading from package Reloading datasets from packages will overwrite any changes / mutations applied to them.","title":"mutate"},{"location":"RBasics6/#filter","text":"The function filter(...) filters rows. # Following previous example outOfShape - filter(starwars, bmi 30) outOfShape$name [1] R2-D2 Darth Vader Owen Lars R5-D4 Jabba Desilijic Tiure [6] Jek Tono Porkins Yoda IG-88 Bossk Sebulba [11] Dud Bolt Grievous","title":"filter"},{"location":"RBasics6/#select","text":"The function select(...) returns selected columns. # Following previous example fitnessProgram - select(outOfShape, name, mass, height, bmi) fitnessProgram # A tibble: 12 x 4 name mass height bmi chr dbl int dbl 1 R2-D2 32 96 34.72222 2 Darth Vader 136 202 33.33007 3 Owen Lars 120 178 37.87401 4 R5-D4 32 97 34.00999 5 Jabba Desilijic Tiure 1358 175 443.42857 ...","title":"select"},{"location":"RBasics6/#pipe-operator-gt","text":"The pipe operator % % to pipe the output of one function to the next. # Following previous example starwars % % filter(films == The Force Awakens ) % % select(name, species) # A tibble: 5 x 2 name species chr chr 1 Finn Human 2 Rey Human 3 Poe Dameron Human 4 BB8 Droid 5 Captain Phasma NA","title":"Pipe operator: %&gt;%"},{"location":"RBasics7/","text":"R Basics / Basic Plotting Last updated on 21 Jan 18 This sections covers basic plotting of data using scatter plots, histograms and box plots. plot The function plot(...) creates a simple scatter plot by default. library(dplyr) data(ToothGrowth) ToothGrowth - filter(ToothGrowth, supp == OJ ) dosage - ToothGrowth$dose toothLength - ToothGrowth$len plot(dosage, toothLength) The Effect of Vitamin C on Tooth Growth in Guinea Pigs hist The function hist(...) creates a histogram. library(dplyr) data(USAccDeaths) hist(USAccDeaths) Accidental Deaths in the US 1973-1978 boxplot The function boxplot(...) creates a box plot. library(dplyr) data(starwars) starwars - filter(starwars, species %in% c( Wookiee , Gungan , Zabrak )) boxplot(height~species, data=starwars) Box plot comparing height of Star Wars species","title":"Basic Plotting"},{"location":"RBasics7/#r-basics-basic-plotting","text":"Last updated on 21 Jan 18 This sections covers basic plotting of data using scatter plots, histograms and box plots.","title":"R Basics / Basic Plotting"},{"location":"RBasics7/#plot","text":"The function plot(...) creates a simple scatter plot by default. library(dplyr) data(ToothGrowth) ToothGrowth - filter(ToothGrowth, supp == OJ ) dosage - ToothGrowth$dose toothLength - ToothGrowth$len plot(dosage, toothLength) The Effect of Vitamin C on Tooth Growth in Guinea Pigs","title":"plot"},{"location":"RBasics7/#hist","text":"The function hist(...) creates a histogram. library(dplyr) data(USAccDeaths) hist(USAccDeaths) Accidental Deaths in the US 1973-1978","title":"hist"},{"location":"RBasics7/#boxplot","text":"The function boxplot(...) creates a box plot. library(dplyr) data(starwars) starwars - filter(starwars, species %in% c( Wookiee , Gungan , Zabrak )) boxplot(height~species, data=starwars) Box plot comparing height of Star Wars species","title":"boxplot"},{"location":"RBasics8/","text":"R Basics / R Programming Last updated on 21 Jan 18 This section covers basic R programming features such as if-else statements, for loops and function definitions. if ... else statement if statement The if statement is a conditional expression which executes code within the {...} block if the condition evaluates to TRUE . If the condition evaluates to FALSE , the code within the block is not executed. number - 3 if(number 2) { # The condition + print( Bigger than 2. ) + } Bigger than 2. number - 1 if(number 2) { # The condition + print( Bigger than 2. ) + } Using print print(...) prints its argument out and returns it invisibly. For example, result - print(53) will assign the number 53 to result after printing. if ... else statement The if statement is a conditional expression which executes code within the {...} block if the condition evaluates to TRUE . If the condition evaluates to FALSE , the code within the block is not executed. Additionally, if there is an else statement after the if block, the code within the {...} block following the else statement will be executed. number - 9 if(number%%2 == 0) { + print( Even. ) + } else { + print( Odd. ) + } [1] Odd. ifelse The function ifelse(condition, x, y) returns x if the condition evaluates to TRUE , and y if the condition evaluates to FALSE . number - 9 ifelse(number%%2 == 0, Even , Odd ) [1] Odd The function also works on vectors. grades - c(53, 74, NA, 20, NA, 78, 93, NA) # NA for non-submission finalGrades - ifelse(is.na(grades), 0, grades) # Convert NAs to 0 finalGrades [1] 53 74 0 20 0 78 93 0 any and all The function any(...) takes in a logical vector and returns TRUE if any of the entries are TRUE . If all entries are FALSE , it returns FALSE . any(c(TRUE, FALSE, TRUE)) [1] TRUE The function all(...) takes in a logical vector and returns TRUE if all of the entries are TRUE . If any entry is FALSE , it returns FALSE . all(c(TRUE, FALSE, TRUE)) [1] FALSE for loop A for loop executes the code within its {...} block once for each value in the supplied range. for(i in 1:5) { + print(10^i) + } [1] 10 [1] 100 [1] 1000 [1] 10000 [1] 1e+05 Creating functions A function can be defined by assigning the output of function to an object. discriminant - function(a, b, c) { + b^2 - 4*a*c + } discriminant(5, 6, 1) [1] 16","title":"R Programming"},{"location":"RBasics8/#r-basics-r-programming","text":"Last updated on 21 Jan 18 This section covers basic R programming features such as if-else statements, for loops and function definitions.","title":"R Basics / R Programming"},{"location":"RBasics8/#ifelse-statement","text":"","title":"if...else statement"},{"location":"RBasics8/#if-statement","text":"The if statement is a conditional expression which executes code within the {...} block if the condition evaluates to TRUE . If the condition evaluates to FALSE , the code within the block is not executed. number - 3 if(number 2) { # The condition + print( Bigger than 2. ) + } Bigger than 2. number - 1 if(number 2) { # The condition + print( Bigger than 2. ) + } Using print print(...) prints its argument out and returns it invisibly. For example, result - print(53) will assign the number 53 to result after printing.","title":"if statement"},{"location":"RBasics8/#ifelse-statement_1","text":"The if statement is a conditional expression which executes code within the {...} block if the condition evaluates to TRUE . If the condition evaluates to FALSE , the code within the block is not executed. Additionally, if there is an else statement after the if block, the code within the {...} block following the else statement will be executed. number - 9 if(number%%2 == 0) { + print( Even. ) + } else { + print( Odd. ) + } [1] Odd.","title":"if...else statement"},{"location":"RBasics8/#ifelse","text":"The function ifelse(condition, x, y) returns x if the condition evaluates to TRUE , and y if the condition evaluates to FALSE . number - 9 ifelse(number%%2 == 0, Even , Odd ) [1] Odd The function also works on vectors. grades - c(53, 74, NA, 20, NA, 78, 93, NA) # NA for non-submission finalGrades - ifelse(is.na(grades), 0, grades) # Convert NAs to 0 finalGrades [1] 53 74 0 20 0 78 93 0","title":"ifelse"},{"location":"RBasics8/#any-and-all","text":"The function any(...) takes in a logical vector and returns TRUE if any of the entries are TRUE . If all entries are FALSE , it returns FALSE . any(c(TRUE, FALSE, TRUE)) [1] TRUE The function all(...) takes in a logical vector and returns TRUE if all of the entries are TRUE . If any entry is FALSE , it returns FALSE . all(c(TRUE, FALSE, TRUE)) [1] FALSE","title":"any and all"},{"location":"RBasics8/#for-loop","text":"A for loop executes the code within its {...} block once for each value in the supplied range. for(i in 1:5) { + print(10^i) + } [1] 10 [1] 100 [1] 1000 [1] 10000 [1] 1e+05","title":"for loop"},{"location":"RBasics8/#creating-functions","text":"A function can be defined by assigning the output of function to an object. discriminant - function(a, b, c) { + b^2 - 4*a*c + } discriminant(5, 6, 1) [1] 16","title":"Creating functions"}]}