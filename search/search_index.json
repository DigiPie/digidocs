{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DigiDocs \u00b6 Last updated on 12 Jan, 2020 What is this \u00b6 DigiDocs is a collection of concise, to-the-point tutorials and references for my personal use. It started out being a way for me to document what I learn in a concise manner. I did so because I wanted to minimise time spent re-learning things I have forgotten. Info My latest page: Heroku/Quick-Deploy Chapters \u00b6 Check out my notes here: Title Dated Remarks C Mar 2019 to Present Work-in-progress Git Mar 2019 to Present Work-in-progress Heroku Jan 2020 to Present Work-in-progress Who is this by \u00b6 Hi, I am Evan , a Computer Science undergraduate at the National University of Singapore . You can find out more about me by visiting my website at www.evantay.com .","title":"Home"},{"location":"#digidocs","text":"Last updated on 12 Jan, 2020","title":"DigiDocs"},{"location":"#what-is-this","text":"DigiDocs is a collection of concise, to-the-point tutorials and references for my personal use. It started out being a way for me to document what I learn in a concise manner. I did so because I wanted to minimise time spent re-learning things I have forgotten. Info My latest page: Heroku/Quick-Deploy","title":"What is this"},{"location":"#chapters","text":"Check out my notes here: Title Dated Remarks C Mar 2019 to Present Work-in-progress Git Mar 2019 to Present Work-in-progress Heroku Jan 2020 to Present Work-in-progress","title":"Chapters"},{"location":"#who-is-this-by","text":"Hi, I am Evan , a Computer Science undergraduate at the National University of Singapore . You can find out more about me by visiting my website at www.evantay.com .","title":"Who is this by"},{"location":"DevOps/","text":"DevOps \u00b6 In this chapter you will find my notes for DevOps/Operations-related knowledge. You will find information on Linux, Docker and Git under the DevOps folder. Info This chapter was started on 5 Feb 2019 . This chapter's content was last updated in Feb 19 .","title":"DevOps"},{"location":"DevOps/#devops","text":"In this chapter you will find my notes for DevOps/Operations-related knowledge. You will find information on Linux, Docker and Git under the DevOps folder. Info This chapter was started on 5 Feb 2019 . This chapter's content was last updated in Feb 19 .","title":"DevOps"},{"location":"DevOps/docker/","text":"DevOps / Docker \u00b6 In this section you will find my notes on using Docker for the deployment of Git projects. Docker and Github \u00b6 Deploy script \u00b6 This script assumes that the working directory contains a .git directory, Dockerfile and package.json . A .gitignore and a .dockerignore file may be useful too. It is also assumed that the project dependencies have been installed using npm install . deploy.sh 1 2 3 4 5 6 7 8 9 10 IMAGE_NAME = \"<IMAGE>\" CONTAINER_NAME = \"<NAME>\" CONTAINER_PORT = \"<PORT_1>\" # To be mapped to HOST_PORT HOST_PORT = \"<PORT_2>\" # The port clients will access docker stop $CONTAINER_NAME docker system prune -af # Removes the container and all unused images git pull origin master # Pulls latest source files and image docker build -t $IMAGE_NAME . docker run --name $CONTAINER_NAME -p $CONTAINER_PORT : $HOST_PORT -d $IMAGE_NAME Before the script can be used, replace the following placeholders: <IMAGE> : The name of your image. <NAME> : The desired name of your container. <PORT_1> : The port of your container which your application is running on. <PORT_2> : The host port your container port will be mapped to. Resources \u00b6 How To Build a Node.js Application with Docker","title":"DevOps / Docker"},{"location":"DevOps/docker/#devops-docker","text":"In this section you will find my notes on using Docker for the deployment of Git projects.","title":"DevOps / Docker"},{"location":"DevOps/docker/#docker-and-github","text":"","title":"Docker and Github"},{"location":"DevOps/docker/#deploy-script","text":"This script assumes that the working directory contains a .git directory, Dockerfile and package.json . A .gitignore and a .dockerignore file may be useful too. It is also assumed that the project dependencies have been installed using npm install . deploy.sh 1 2 3 4 5 6 7 8 9 10 IMAGE_NAME = \"<IMAGE>\" CONTAINER_NAME = \"<NAME>\" CONTAINER_PORT = \"<PORT_1>\" # To be mapped to HOST_PORT HOST_PORT = \"<PORT_2>\" # The port clients will access docker stop $CONTAINER_NAME docker system prune -af # Removes the container and all unused images git pull origin master # Pulls latest source files and image docker build -t $IMAGE_NAME . docker run --name $CONTAINER_NAME -p $CONTAINER_PORT : $HOST_PORT -d $IMAGE_NAME Before the script can be used, replace the following placeholders: <IMAGE> : The name of your image. <NAME> : The desired name of your container. <PORT_1> : The port of your container which your application is running on. <PORT_2> : The host port your container port will be mapped to.","title":"Deploy script"},{"location":"DevOps/docker/#resources","text":"How To Build a Node.js Application with Docker","title":"Resources"},{"location":"DevOps/ubuntu18-04/","text":"DevOps / Ubuntu 18.04 \u00b6 In this section you will find my notes on setting up and securing Ubuntu 18.04. Vim knowledge is assumed. Creating a new non-root Sudo user \u00b6 It is recommended to avoid using the root user account on a regular basis as it compromises security and is risky. Instead, create a new user account and add it to the sudo group. Add a new user \u00b6 1 adduser evan Add user to sudo group \u00b6 1 usermod -aG sudo evan Log in to user \u00b6 1 su evan Only allow Key Authentication \u00b6 Password-based authentication is susceptible to brute-force attacks. Thus, it is good practice to disable it and only allow key-based authentication. Add Public Key to User \u00b6 As mentioned, usage of the root user account should be avoided. Hence, it is advisable that you add your public key to the user account you created earlier on. It is assumed that you logged into your root account using SSH key. Create a authorized_keys file: 1 2 3 4 su evan cd ~ mkdir .ssh vim .ssh/authorized_keys Insert your public key and save the file with :wq! . You can copy this from the authorized_keys file under the root account's directory. You can find the file using the following commands: 1 2 3 su root cd ~ vim .ssh/authorized_keys Vim Tip Toggle visual mode by pressing v at the start of the line for the public key you wish to copy over. Press $ to move the cursor to the end of the line; doing so highlights the entire line. Press y to yank (copy). Then exit the file using :q! . Enter the destination authorized_keys file. Press p to paste what you yanked. Disable Password Authentication \u00b6 As it is assumed that you logged into your root account using SSH key, this step could be unnecessary. However, do still perform a check to verify that PasswordAuthentication no is in place. Open sshd_config with Vim: 1 sudo vim /etc/ssh/sshd_config Add PasswordAuthentication no . It might be commented out as #PasswordAuthentication no or written as PasswordAuthentication yes . If you find either, replace with PasswordAuthentication no . Else just add it in. Vim Tip Use :/PasswordAuthentication to find #PasswordAuthentication no . Save the file with :wq! . Restart ssh to implement this change: 1 sudo systemctl restart ssh Basic Firewall \u00b6 List application profiles registered with ufw firewall: 1 sudo ufw app list You should see 1 2 Available applications: OpenSSH Ensure the firewall allows SSH connections: 1 2 3 sudo ufw allow OpenSSH sudo ufw enable # Enable firewall sudo ufw status # Check if OpenSSH is allowed You should see the following after executing sudo ufw status : 1 2 3 4 To Action From -- ------ ---- OpenSSH ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) Web Resources \u00b6 Initial Server Setup with Ubuntu 18.04 How to Set Up SSH Keys on Ubuntu 18.04","title":"DevOps / Ubuntu 18.04"},{"location":"DevOps/ubuntu18-04/#devops-ubuntu-1804","text":"In this section you will find my notes on setting up and securing Ubuntu 18.04. Vim knowledge is assumed.","title":"DevOps / Ubuntu 18.04"},{"location":"DevOps/ubuntu18-04/#creating-a-new-non-root-sudo-user","text":"It is recommended to avoid using the root user account on a regular basis as it compromises security and is risky. Instead, create a new user account and add it to the sudo group.","title":"Creating a new non-root Sudo user"},{"location":"DevOps/ubuntu18-04/#add-a-new-user","text":"1 adduser evan","title":"Add a new user"},{"location":"DevOps/ubuntu18-04/#add-user-to-sudo-group","text":"1 usermod -aG sudo evan","title":"Add user to sudo group"},{"location":"DevOps/ubuntu18-04/#log-in-to-user","text":"1 su evan","title":"Log in to user"},{"location":"DevOps/ubuntu18-04/#only-allow-key-authentication","text":"Password-based authentication is susceptible to brute-force attacks. Thus, it is good practice to disable it and only allow key-based authentication.","title":"Only allow Key Authentication"},{"location":"DevOps/ubuntu18-04/#add-public-key-to-user","text":"As mentioned, usage of the root user account should be avoided. Hence, it is advisable that you add your public key to the user account you created earlier on. It is assumed that you logged into your root account using SSH key. Create a authorized_keys file: 1 2 3 4 su evan cd ~ mkdir .ssh vim .ssh/authorized_keys Insert your public key and save the file with :wq! . You can copy this from the authorized_keys file under the root account's directory. You can find the file using the following commands: 1 2 3 su root cd ~ vim .ssh/authorized_keys Vim Tip Toggle visual mode by pressing v at the start of the line for the public key you wish to copy over. Press $ to move the cursor to the end of the line; doing so highlights the entire line. Press y to yank (copy). Then exit the file using :q! . Enter the destination authorized_keys file. Press p to paste what you yanked.","title":"Add Public Key to User"},{"location":"DevOps/ubuntu18-04/#disable-password-authentication","text":"As it is assumed that you logged into your root account using SSH key, this step could be unnecessary. However, do still perform a check to verify that PasswordAuthentication no is in place. Open sshd_config with Vim: 1 sudo vim /etc/ssh/sshd_config Add PasswordAuthentication no . It might be commented out as #PasswordAuthentication no or written as PasswordAuthentication yes . If you find either, replace with PasswordAuthentication no . Else just add it in. Vim Tip Use :/PasswordAuthentication to find #PasswordAuthentication no . Save the file with :wq! . Restart ssh to implement this change: 1 sudo systemctl restart ssh","title":"Disable Password Authentication"},{"location":"DevOps/ubuntu18-04/#basic-firewall","text":"List application profiles registered with ufw firewall: 1 sudo ufw app list You should see 1 2 Available applications: OpenSSH Ensure the firewall allows SSH connections: 1 2 3 sudo ufw allow OpenSSH sudo ufw enable # Enable firewall sudo ufw status # Check if OpenSSH is allowed You should see the following after executing sudo ufw status : 1 2 3 4 To Action From -- ------ ---- OpenSSH ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6)","title":"Basic Firewall"},{"location":"DevOps/ubuntu18-04/#web-resources","text":"Initial Server Setup with Ubuntu 18.04 How to Set Up SSH Keys on Ubuntu 18.04","title":"Web Resources"},{"location":"R/","text":"Programming in R \u00b6 In this chapter you will find my documentation of basic R programming knowledge picked up while taking the HarvardX's Data Science: R Basics course. Info I started the course on 4 Dec 17 and completed it on 21 Jan 18 . This chapter was started about the same time. This chapter's content was last updated in Jan 18 . Sections \u00b6 Week * Title Remarks 1 Functions and data access This section covers commonly-used R functions and data access via the $ sign. 2.1 Vectors and subsetting This section covers vector manipulation and specific access of entries in a vector via subsetting. 2.2 Sort, order and rank This section covers sorting, ordering and ranking of vectors. 2.2 Data frame and coercion This section covers Data Frame, Coercion and NA values. 2.3 and 3.1 Vector arithmetic This section covers vector arithmetic and indexing. 3.2 Data manipulation This section covers data manipulation using dplyr package's mutate , filter and select functions, and %>% operator. 3.3 Basic plotting This sections covers basic plotting of data using scatter plots, histograms and box plots. 4 R programming This section covers basic R programming features such as if-else statements, for loops and function definitions. * Week corresponds to HarvardX's Data Science: R Basics' curriculum","title":"Programming in R"},{"location":"R/#programming-in-r","text":"In this chapter you will find my documentation of basic R programming knowledge picked up while taking the HarvardX's Data Science: R Basics course. Info I started the course on 4 Dec 17 and completed it on 21 Jan 18 . This chapter was started about the same time. This chapter's content was last updated in Jan 18 .","title":"Programming in R"},{"location":"R/#sections","text":"Week * Title Remarks 1 Functions and data access This section covers commonly-used R functions and data access via the $ sign. 2.1 Vectors and subsetting This section covers vector manipulation and specific access of entries in a vector via subsetting. 2.2 Sort, order and rank This section covers sorting, ordering and ranking of vectors. 2.2 Data frame and coercion This section covers Data Frame, Coercion and NA values. 2.3 and 3.1 Vector arithmetic This section covers vector arithmetic and indexing. 3.2 Data manipulation This section covers data manipulation using dplyr package's mutate , filter and select functions, and %>% operator. 3.3 Basic plotting This sections covers basic plotting of data using scatter plots, histograms and box plots. 4 R programming This section covers basic R programming features such as if-else statements, for loops and function definitions. * Week corresponds to HarvardX's Data Science: R Basics' curriculum","title":"Sections"},{"location":"R/basic-plotting/","text":"R / Basic plotting \u00b6 This sections covers basic plotting of data using scatter plots, histograms and box plots. plot \u00b6 The function plot(...) creates a simple scatter plot by default. 1 2 3 4 5 6 > library ( dplyr ) > data ( ToothGrowth ) > ToothGrowth <- filter ( ToothGrowth , supp == \"OJ\" ) > dosage <- ToothGrowth $ dose > toothLength <- ToothGrowth $ len > plot ( dosage , toothLength ) The Effect of Vitamin C on Tooth Growth in Guinea Pigs hist \u00b6 The function hist(...) creates a histogram. 1 2 3 > library ( dplyr ) > data ( USAccDeaths ) > hist ( USAccDeaths ) Accidental Deaths in the US 1973-1978 boxplot \u00b6 The function boxplot(...) creates a box plot. 1 2 3 4 > library ( dplyr ) > data ( starwars ) > starwars <- filter ( starwars , species %in% c ( \"Wookiee\" , \"Gungan\" , \"Zabrak\" )) > boxplot ( height ~ species , data = starwars ) Box plot comparing height of Star Wars species","title":"R / Basic plotting"},{"location":"R/basic-plotting/#r-basic-plotting","text":"This sections covers basic plotting of data using scatter plots, histograms and box plots.","title":"R / Basic plotting"},{"location":"R/basic-plotting/#plot","text":"The function plot(...) creates a simple scatter plot by default. 1 2 3 4 5 6 > library ( dplyr ) > data ( ToothGrowth ) > ToothGrowth <- filter ( ToothGrowth , supp == \"OJ\" ) > dosage <- ToothGrowth $ dose > toothLength <- ToothGrowth $ len > plot ( dosage , toothLength ) The Effect of Vitamin C on Tooth Growth in Guinea Pigs","title":"plot"},{"location":"R/basic-plotting/#hist","text":"The function hist(...) creates a histogram. 1 2 3 > library ( dplyr ) > data ( USAccDeaths ) > hist ( USAccDeaths ) Accidental Deaths in the US 1973-1978","title":"hist"},{"location":"R/basic-plotting/#boxplot","text":"The function boxplot(...) creates a box plot. 1 2 3 4 > library ( dplyr ) > data ( starwars ) > starwars <- filter ( starwars , species %in% c ( \"Wookiee\" , \"Gungan\" , \"Zabrak\" )) > boxplot ( height ~ species , data = starwars ) Box plot comparing height of Star Wars species","title":"boxplot"},{"location":"R/data-frame/","text":"R / Data frame and coercion \u00b6 This section covers Data Frame, Coercion and NA values. Data frame creation \u00b6 data.frame \u00b6 The function data.frame(...) is used to create a new data frame. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 > states <- row.names ( USArrests ) > ranks <- rank ( USArrests $ Murder ) > StatesWithRank <- data.frame ( name = states , rank = ranks ) > head ( StatesWithRank ) name rank 1 Alabama 44.5 2 Alaska 35.0 3 Arizona 29.0 4 Arkansas 31.0 5 California 32.5 6 Colorado 28.0 > > ind <- order ( USArrests $ Murder ) > StatesWithRankOrdered <- data.frame ( name = states[ind] , rank = ranks[ind] ) > head ( StatesWithRankOrdered ) name rank 1 North Dakota 1.0 2 Maine 2.5 3 New Hampshire 2.5 4 Iowa 4.5 5 Vermont 4.5 6 Idaho 6.5 Coercion \u00b6 When an entry's type is not what is expected, R will attempt to coerce it into the expected type. 1 2 3 4 > fibonacci <- c ( 1 , \"one\" , 2 , 3 ) [1] \"1\" \"one\" \"2\" \"3\" > class ( fibonacci ) [1] \"character\" Explicit coercion \u00b6 Explicitly coerce values using the as functions. as.character(x) : Coerce vector x's entries into characters. Example: y <- as.character(c(1:5)) . as.numeric(x) : Coerce vector x's entries into numbers. Missing data In R, missing values are represented by the symbol NA which stands for 'Not Available'. When coercion fails, R will return a warning and set the values which failed coercion to NA . 1 2 3 4 5 > z <- as.numeric ( c ( 1 , \"b\" , 3 )) Warning message : NAs introduced by coercion > z [1] 1 NA 3 Using Integers integer occupies lesser space in memory than numeric . Append L to a number to create an integer. Example: class(3L) returns [1] \"integer\" . Dealing with NA values \u00b6 You can due with NA values using the boolean NOT operator / negation operator ! . 1 2 3 4 5 6 7 8 9 10 11 > numbers <- c ( 1.0 , 'b' , 2.5 , 3.33 ) > numbers <- as.numeric ( numbers ) Warning message : NAs introduced by coercion > mean ( numbers ) [1] NA > numbers [1] 1.00 NA 2.50 3.33 > ind = is.na ( numbers ) # Get index(s) of NA values > mean ( numbers[ ! ind] ) # !ind returns index(s) of non-NA values [1] 2.276667","title":"R / Data frame and coercion"},{"location":"R/data-frame/#r-data-frame-and-coercion","text":"This section covers Data Frame, Coercion and NA values.","title":"R / Data frame and coercion"},{"location":"R/data-frame/#data-frame-creation","text":"","title":"Data frame creation"},{"location":"R/data-frame/#dataframe","text":"The function data.frame(...) is used to create a new data frame. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 > states <- row.names ( USArrests ) > ranks <- rank ( USArrests $ Murder ) > StatesWithRank <- data.frame ( name = states , rank = ranks ) > head ( StatesWithRank ) name rank 1 Alabama 44.5 2 Alaska 35.0 3 Arizona 29.0 4 Arkansas 31.0 5 California 32.5 6 Colorado 28.0 > > ind <- order ( USArrests $ Murder ) > StatesWithRankOrdered <- data.frame ( name = states[ind] , rank = ranks[ind] ) > head ( StatesWithRankOrdered ) name rank 1 North Dakota 1.0 2 Maine 2.5 3 New Hampshire 2.5 4 Iowa 4.5 5 Vermont 4.5 6 Idaho 6.5","title":"data.frame"},{"location":"R/data-frame/#coercion","text":"When an entry's type is not what is expected, R will attempt to coerce it into the expected type. 1 2 3 4 > fibonacci <- c ( 1 , \"one\" , 2 , 3 ) [1] \"1\" \"one\" \"2\" \"3\" > class ( fibonacci ) [1] \"character\"","title":"Coercion"},{"location":"R/data-frame/#explicit-coercion","text":"Explicitly coerce values using the as functions. as.character(x) : Coerce vector x's entries into characters. Example: y <- as.character(c(1:5)) . as.numeric(x) : Coerce vector x's entries into numbers. Missing data In R, missing values are represented by the symbol NA which stands for 'Not Available'. When coercion fails, R will return a warning and set the values which failed coercion to NA . 1 2 3 4 5 > z <- as.numeric ( c ( 1 , \"b\" , 3 )) Warning message : NAs introduced by coercion > z [1] 1 NA 3 Using Integers integer occupies lesser space in memory than numeric . Append L to a number to create an integer. Example: class(3L) returns [1] \"integer\" .","title":"Explicit coercion"},{"location":"R/data-frame/#dealing-with-na-values","text":"You can due with NA values using the boolean NOT operator / negation operator ! . 1 2 3 4 5 6 7 8 9 10 11 > numbers <- c ( 1.0 , 'b' , 2.5 , 3.33 ) > numbers <- as.numeric ( numbers ) Warning message : NAs introduced by coercion > mean ( numbers ) [1] NA > numbers [1] 1.00 NA 2.50 3.33 > ind = is.na ( numbers ) # Get index(s) of NA values > mean ( numbers[ ! ind] ) # !ind returns index(s) of non-NA values [1] 2.276667","title":"Dealing with NA values"},{"location":"R/data-manipulation/","text":"R / Data manipulation \u00b6 This section covers data manipulation using dplyr package's mutate , filter and select functions, and %>% operator. dplyr package \u00b6 The dplyr package is a grammar of data manipulation for R. Installation & usage \u00b6 1 2 > install.packages ( \"dplyr\" ) > library ( dplyr ) # To load and use mutate \u00b6 The function mutate(...) can be used to create a new column. 1 2 3 4 5 > data ( starwars ) # From package dplyr > starwars <- mutate ( starwars , bmi = mass / (( height / 100 ) ** 2 )) > highestBMI <- which.max ( starwars $ bmi ) > starwars $ name[highestBMI] [1] \"Jabba Desilijic Tiure\" Reloading from package Reloading datasets from packages will overwrite any changes / mutations applied to them. filter \u00b6 The function filter(...) filters rows. 1 2 3 4 5 6 > # Following previous example > outOfShape <- filter ( starwars , bmi > 30 ) > outOfShape $ name [1] \"R2-D2\" \"Darth Vader\" \"Owen Lars\" \"R5-D4\" \"Jabba Desilijic Tiure\" [6] \"Jek Tono Porkins\" \"Yoda\" \"IG-88\" \"Bossk\" \"Sebulba\" [11] \"Dud Bolt\" \"Grievous\" select \u00b6 The function select(...) returns selected columns. 1 2 3 4 5 6 7 8 9 10 11 12 > # Following previous example > fitnessProgram <- select ( outOfShape , name , mass , height , bmi ) > fitnessProgram # A tibble: 12 x 4 name mass height bmi < chr > < dbl > < int > < dbl > 1 R2 - D2 32 96 34.72222 2 Darth Vader 136 202 33.33007 3 Owen Lars 120 178 37.87401 4 R5 - D4 32 97 34.00999 5 Jabba Desilijic Tiure 1358 175 443.42857 ... Pipe operator: %>% \u00b6 The pipe operator %>% to pipe the output of one function to the next. 1 2 3 4 5 6 7 8 9 10 > # Following previous example > starwars %>% filter ( films == \"The Force Awakens\" ) %>% select ( name , species ) # A tibble: 5 x 2 name species < chr > < chr > 1 Finn Human 2 Rey Human 3 Poe Dameron Human 4 BB8 Droid 5 Captain Phasma < NA >","title":"R / Data manipulation"},{"location":"R/data-manipulation/#r-data-manipulation","text":"This section covers data manipulation using dplyr package's mutate , filter and select functions, and %>% operator.","title":"R / Data manipulation"},{"location":"R/data-manipulation/#dplyr-package","text":"The dplyr package is a grammar of data manipulation for R.","title":"dplyr package"},{"location":"R/data-manipulation/#installation-usage","text":"1 2 > install.packages ( \"dplyr\" ) > library ( dplyr ) # To load and use","title":"Installation &amp; usage"},{"location":"R/data-manipulation/#mutate","text":"The function mutate(...) can be used to create a new column. 1 2 3 4 5 > data ( starwars ) # From package dplyr > starwars <- mutate ( starwars , bmi = mass / (( height / 100 ) ** 2 )) > highestBMI <- which.max ( starwars $ bmi ) > starwars $ name[highestBMI] [1] \"Jabba Desilijic Tiure\" Reloading from package Reloading datasets from packages will overwrite any changes / mutations applied to them.","title":"mutate"},{"location":"R/data-manipulation/#filter","text":"The function filter(...) filters rows. 1 2 3 4 5 6 > # Following previous example > outOfShape <- filter ( starwars , bmi > 30 ) > outOfShape $ name [1] \"R2-D2\" \"Darth Vader\" \"Owen Lars\" \"R5-D4\" \"Jabba Desilijic Tiure\" [6] \"Jek Tono Porkins\" \"Yoda\" \"IG-88\" \"Bossk\" \"Sebulba\" [11] \"Dud Bolt\" \"Grievous\"","title":"filter"},{"location":"R/data-manipulation/#select","text":"The function select(...) returns selected columns. 1 2 3 4 5 6 7 8 9 10 11 12 > # Following previous example > fitnessProgram <- select ( outOfShape , name , mass , height , bmi ) > fitnessProgram # A tibble: 12 x 4 name mass height bmi < chr > < dbl > < int > < dbl > 1 R2 - D2 32 96 34.72222 2 Darth Vader 136 202 33.33007 3 Owen Lars 120 178 37.87401 4 R5 - D4 32 97 34.00999 5 Jabba Desilijic Tiure 1358 175 443.42857 ...","title":"select"},{"location":"R/data-manipulation/#pipe-operator-gt","text":"The pipe operator %>% to pipe the output of one function to the next. 1 2 3 4 5 6 7 8 9 10 > # Following previous example > starwars %>% filter ( films == \"The Force Awakens\" ) %>% select ( name , species ) # A tibble: 5 x 2 name species < chr > < chr > 1 Finn Human 2 Rey Human 3 Poe Dameron Human 4 BB8 Droid 5 Captain Phasma < NA >","title":"Pipe operator: %&gt;%"},{"location":"R/functions/","text":"R / Functions and data access \u00b6 This section covers commonly-used R functions and also data access via the $ sign. Functions \u00b6 To execute a function add parentheses () behind the function's name. If the parentheses are absent, the function's code is displayed instead of being executed. Use args(x) or help(\"x\") to get information on the arguments of a function x . Arguments with default values are optional. args(x) : Returns function x 's arguments. help(\"x\") : Returns function x 's manual ?x : Shortform operator of help(\"x\") which works for most functions. Determine object type \u00b6 class(x) : Returns object x 's type ( character , numeric , logical , etc.). str(x) : Returns object x 's type, observations and variables (if any). identical(a, b) : Returns TRUE if identical; FALSE otherwise. Data frame functions \u00b6 What is a Data Frame? Conceptually a data frame is a table. head(x) : Returns the first six lines of data frame x . names(x) : Returns the names of variables in data frame x . Vector functions \u00b6 What is a Vector? A vector is a sequence of data elements of the same basic type. length(x) : Returns the number of entries in vector x . table(x) : Returns the frequency of unique elements in vector x . Factor function \u00b6 What is a Factor? A factor in R is a vector of integer values with a corresponding set of character values used when the factor is displayed. It is also known as enumerated type . levels(x) : Returns factor x 's levels (the possible values of x ). Workspace functions \u00b6 data() : Returns pre-built data sets for practice. ls() : Returns objects in the workspace. Data access \u00b6 Use the $ sign to access data. A vector of entries is returned. 1 > vectorA <- dataFrame $ variableA Alternatively, use [[]] . 1 > vectorA <- dataFrame[[variableA]] The order of entries are preserved when they are accessed as such. Using [] instead of [[]] Note that if you only use [] , you will return a subset of the original data as a data frame.","title":"R / Functions and data access"},{"location":"R/functions/#r-functions-and-data-access","text":"This section covers commonly-used R functions and also data access via the $ sign.","title":"R / Functions and data access"},{"location":"R/functions/#functions","text":"To execute a function add parentheses () behind the function's name. If the parentheses are absent, the function's code is displayed instead of being executed. Use args(x) or help(\"x\") to get information on the arguments of a function x . Arguments with default values are optional. args(x) : Returns function x 's arguments. help(\"x\") : Returns function x 's manual ?x : Shortform operator of help(\"x\") which works for most functions.","title":"Functions"},{"location":"R/functions/#determine-object-type","text":"class(x) : Returns object x 's type ( character , numeric , logical , etc.). str(x) : Returns object x 's type, observations and variables (if any). identical(a, b) : Returns TRUE if identical; FALSE otherwise.","title":"Determine object type"},{"location":"R/functions/#data-frame-functions","text":"What is a Data Frame? Conceptually a data frame is a table. head(x) : Returns the first six lines of data frame x . names(x) : Returns the names of variables in data frame x .","title":"Data frame functions"},{"location":"R/functions/#vector-functions","text":"What is a Vector? A vector is a sequence of data elements of the same basic type. length(x) : Returns the number of entries in vector x . table(x) : Returns the frequency of unique elements in vector x .","title":"Vector functions"},{"location":"R/functions/#factor-function","text":"What is a Factor? A factor in R is a vector of integer values with a corresponding set of character values used when the factor is displayed. It is also known as enumerated type . levels(x) : Returns factor x 's levels (the possible values of x ).","title":"Factor function"},{"location":"R/functions/#workspace-functions","text":"data() : Returns pre-built data sets for practice. ls() : Returns objects in the workspace.","title":"Workspace functions"},{"location":"R/functions/#data-access","text":"Use the $ sign to access data. A vector of entries is returned. 1 > vectorA <- dataFrame $ variableA Alternatively, use [[]] . 1 > vectorA <- dataFrame[[variableA]] The order of entries are preserved when they are accessed as such. Using [] instead of [[]] Note that if you only use [] , you will return a subset of the original data as a data frame.","title":"Data access"},{"location":"R/r-programming/","text":"R / R programming \u00b6 This section covers basic R programming features such as if-else statements, for loops and function definitions. if ... else statement \u00b6 if statement \u00b6 The if statement is a conditional expression which executes code within the {...} block if the condition evaluates to TRUE . If the condition evaluates to FALSE , the code within the block is not executed. 1 2 3 4 5 6 7 8 9 10 > number <- 3 > if ( number > 2 ) { # The condition + print ( \"Bigger than 2.\" ) + } Bigger than 2 . > number <- 1 > if ( number > 2 ) { # The condition + print ( \"Bigger than 2.\" ) + } > Using print print(...) prints its argument out and returns it invisibly. For example, result <- print(53) will assign the number 53 to result after printing. if ... else statement \u00b6 The if statement is a conditional expression which executes code within the {...} block if the condition evaluates to TRUE . If the condition evaluates to FALSE , the code within the block is not executed. Additionally, if there is an else statement after the if block, the code within the {...} block following the else statement will be executed. 1 2 3 4 5 6 7 > number <- 9 > if ( number %% 2 == 0 ) { + print ( \"Even.\" ) + } else { + print ( \"Odd.\" ) + } [1] \"Odd.\" ifelse \u00b6 The function ifelse(condition, x, y) returns x if the condition evaluates to TRUE , and y if the condition evaluates to FALSE . 1 2 3 > number <- 9 > ifelse ( number %% 2 == 0 , \"Even\" , \"Odd\" ) [1] \"Odd\" The function also works on vectors. 1 2 3 4 > grades <- c ( 53 , 74 , NA , 20 , NA , 78 , 93 , NA ) # NA for non-submission > finalGrades <- ifelse ( is.na ( grades ), 0 , grades ) # Convert NAs to 0 > finalGrades [1] 53 74 0 20 0 78 93 0 any and all \u00b6 The function any(...) takes in a logical vector and returns TRUE if any of the entries are TRUE . If all entries are FALSE , it returns FALSE . 1 2 > any ( c ( TRUE , FALSE , TRUE )) [1] TRUE The function all(...) takes in a logical vector and returns TRUE if all of the entries are TRUE . If any entry is FALSE , it returns FALSE . 1 2 > all ( c ( TRUE , FALSE , TRUE )) [1] FALSE for loop \u00b6 A for loop executes the code within its {...} block once for each value in the supplied range. 1 2 3 4 5 6 7 8 > for ( i in 1 : 5 ) { + print ( 10 ^i ) + } [1] 10 [1] 100 [1] 1000 [1] 10000 [1] 1e+05 Creating functions \u00b6 A function can be defined by assigning the output of function to an object. 1 2 3 4 5 > discriminant <- function ( a , b , c ) { + b^2 - 4 * a * c + } > discriminant ( 5 , 6 , 1 ) [1] 16","title":"R / R programming"},{"location":"R/r-programming/#r-r-programming","text":"This section covers basic R programming features such as if-else statements, for loops and function definitions.","title":"R / R programming"},{"location":"R/r-programming/#ifelse-statement","text":"","title":"if...else statement"},{"location":"R/r-programming/#if-statement","text":"The if statement is a conditional expression which executes code within the {...} block if the condition evaluates to TRUE . If the condition evaluates to FALSE , the code within the block is not executed. 1 2 3 4 5 6 7 8 9 10 > number <- 3 > if ( number > 2 ) { # The condition + print ( \"Bigger than 2.\" ) + } Bigger than 2 . > number <- 1 > if ( number > 2 ) { # The condition + print ( \"Bigger than 2.\" ) + } > Using print print(...) prints its argument out and returns it invisibly. For example, result <- print(53) will assign the number 53 to result after printing.","title":"if statement"},{"location":"R/r-programming/#ifelse-statement_1","text":"The if statement is a conditional expression which executes code within the {...} block if the condition evaluates to TRUE . If the condition evaluates to FALSE , the code within the block is not executed. Additionally, if there is an else statement after the if block, the code within the {...} block following the else statement will be executed. 1 2 3 4 5 6 7 > number <- 9 > if ( number %% 2 == 0 ) { + print ( \"Even.\" ) + } else { + print ( \"Odd.\" ) + } [1] \"Odd.\"","title":"if...else statement"},{"location":"R/r-programming/#ifelse","text":"The function ifelse(condition, x, y) returns x if the condition evaluates to TRUE , and y if the condition evaluates to FALSE . 1 2 3 > number <- 9 > ifelse ( number %% 2 == 0 , \"Even\" , \"Odd\" ) [1] \"Odd\" The function also works on vectors. 1 2 3 4 > grades <- c ( 53 , 74 , NA , 20 , NA , 78 , 93 , NA ) # NA for non-submission > finalGrades <- ifelse ( is.na ( grades ), 0 , grades ) # Convert NAs to 0 > finalGrades [1] 53 74 0 20 0 78 93 0","title":"ifelse"},{"location":"R/r-programming/#any-and-all","text":"The function any(...) takes in a logical vector and returns TRUE if any of the entries are TRUE . If all entries are FALSE , it returns FALSE . 1 2 > any ( c ( TRUE , FALSE , TRUE )) [1] TRUE The function all(...) takes in a logical vector and returns TRUE if all of the entries are TRUE . If any entry is FALSE , it returns FALSE . 1 2 > all ( c ( TRUE , FALSE , TRUE )) [1] FALSE","title":"any and all"},{"location":"R/r-programming/#for-loop","text":"A for loop executes the code within its {...} block once for each value in the supplied range. 1 2 3 4 5 6 7 8 > for ( i in 1 : 5 ) { + print ( 10 ^i ) + } [1] 10 [1] 100 [1] 1000 [1] 10000 [1] 1e+05","title":"for loop"},{"location":"R/r-programming/#creating-functions","text":"A function can be defined by assigning the output of function to an object. 1 2 3 4 5 > discriminant <- function ( a , b , c ) { + b^2 - 4 * a * c + } > discriminant ( 5 , 6 , 1 ) [1] 16","title":"Creating functions"},{"location":"R/vector-arithmetic/","text":"R / Vector arithmetic \u00b6 This section covers vector arithmetic and indexing. Arithmetic operations \u00b6 Arithmetic operations in R apply on every element in a vector. 1 2 3 4 > tempInCelsius <- c ( 0 , 100 , 232.8 ) > tempInFahrenheit <- ( tempInCelsius * 1.8 ) + 32 > tempInFahrenheit [1] 32.00 212.00 451.04 Arithmetic operators \u00b6 Operator Name Examples + Addition 1 + 1 = 2 - Subtraction 1 - 1 = 0 * Multiplication 2 * 3 = 6 / Division 4 / 2 = 2 ^ or ** Exponentiation 2^2 = 4 %% Modulus 5%%4 = 1 %/% Integer division 7%/%2 = 3 Vector arithmetic \u00b6 We can perform vector arithmetic on two vectors of the same length. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 > years = c ( 2014 , 2015 ) > citizens = c ( 3343 , 3375 ) > permanentResidents = c ( 527 , 527 ) > years <- c ( 2014 , 2015 ) > citizens <- c ( 3343 , 3375 ) > permanentResidents <- c ( 527 , 527 ) > SGPopulation <- data.frame ( name = years , citizen = citizens , permanentResident = permanentResidents ) > SGPopulation name citizen permanentResident 1 2014 3343 527 2 2015 3375 527 > > SGTotalResidents <- SGPopulation $ citizen + SGPopulation $ permanentResident > names ( SGTotalResidents ) <- SGPopulation $ name > SGTotalResidents 2014 2015 3870 3902 Logical operations \u00b6 Logical (Relational) operations in R apply on every element in a vector. Using logical operations we are able to perform indexing. Logical operators \u00b6 Operator Name == Equal to != Not equal to < Less than > Greater than <= Less than or equal to >= Greater than or equal to !x Not x x & y x AND y x | y x OR y isTRUE(x) Returns TRUE or FALSE Indexing \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 > grades <- c ( 43 , 73 , 23 , 95 , 55 ) > passing <- grades >= 50 > passing [1] FALSE TRUE FALSE TRUE TRUE > > grades[passing] [1] 73 95 55 > > sum ( passing ) # TRUE evaluates to 1 and FALSE to 0 [1] 3 > > distinction <- grades >= 80 > merit <- passing & ! distinction # Passing grade but NOT Distinction > grades[merit] [1] 73 55 Indexing functions \u00b6 which \u00b6 The function which(x) returns the indices of entries in vector x which are TRUE . 1 2 3 4 5 6 7 8 9 > # Following previous example > distIndex <- which ( distinction ) > distIndex # Stores only indices which are TRUE, thus saving space [1] 4 > grades[distIndex] [1] 95 > notDistIndex <- which ( ! distinction ) # ! operator > grades[notDistIndex] [1] 43 73 23 55 match \u00b6 The function match(x, y) returns the indices of entries in vector y which (first) matches entries in vector x . 1 2 3 4 5 6 7 > countries <- c ( \"MYS\" , \"SGP\" , \"IDN\" ) > codes <- c ( 60 , 65 , 62 ) > countryCodes <- data.frame ( name = countries , code <- codes ) > > ind <- match ( c ( \"SGP\" , \"IDN\" ), countryCodes $ name ) > countryCodes $ code[ind] [1] 65 62 %in% operator \u00b6 The operator y %in% x returns a logical vector of y length that evaluates TRUE if the entry in y is present in x . 1 2 3 > # Following previous example > c ( \"SGP\" , \"LOL\" ) %in% countryCodes $ name [1] TRUE FALSE","title":"R / Vector arithmetic"},{"location":"R/vector-arithmetic/#r-vector-arithmetic","text":"This section covers vector arithmetic and indexing.","title":"R / Vector arithmetic"},{"location":"R/vector-arithmetic/#arithmetic-operations","text":"Arithmetic operations in R apply on every element in a vector. 1 2 3 4 > tempInCelsius <- c ( 0 , 100 , 232.8 ) > tempInFahrenheit <- ( tempInCelsius * 1.8 ) + 32 > tempInFahrenheit [1] 32.00 212.00 451.04","title":"Arithmetic operations"},{"location":"R/vector-arithmetic/#arithmetic-operators","text":"Operator Name Examples + Addition 1 + 1 = 2 - Subtraction 1 - 1 = 0 * Multiplication 2 * 3 = 6 / Division 4 / 2 = 2 ^ or ** Exponentiation 2^2 = 4 %% Modulus 5%%4 = 1 %/% Integer division 7%/%2 = 3","title":"Arithmetic operators"},{"location":"R/vector-arithmetic/#vector-arithmetic","text":"We can perform vector arithmetic on two vectors of the same length. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 > years = c ( 2014 , 2015 ) > citizens = c ( 3343 , 3375 ) > permanentResidents = c ( 527 , 527 ) > years <- c ( 2014 , 2015 ) > citizens <- c ( 3343 , 3375 ) > permanentResidents <- c ( 527 , 527 ) > SGPopulation <- data.frame ( name = years , citizen = citizens , permanentResident = permanentResidents ) > SGPopulation name citizen permanentResident 1 2014 3343 527 2 2015 3375 527 > > SGTotalResidents <- SGPopulation $ citizen + SGPopulation $ permanentResident > names ( SGTotalResidents ) <- SGPopulation $ name > SGTotalResidents 2014 2015 3870 3902","title":"Vector arithmetic"},{"location":"R/vector-arithmetic/#logical-operations","text":"Logical (Relational) operations in R apply on every element in a vector. Using logical operations we are able to perform indexing.","title":"Logical operations"},{"location":"R/vector-arithmetic/#logical-operators","text":"Operator Name == Equal to != Not equal to < Less than > Greater than <= Less than or equal to >= Greater than or equal to !x Not x x & y x AND y x | y x OR y isTRUE(x) Returns TRUE or FALSE","title":"Logical operators"},{"location":"R/vector-arithmetic/#indexing","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 > grades <- c ( 43 , 73 , 23 , 95 , 55 ) > passing <- grades >= 50 > passing [1] FALSE TRUE FALSE TRUE TRUE > > grades[passing] [1] 73 95 55 > > sum ( passing ) # TRUE evaluates to 1 and FALSE to 0 [1] 3 > > distinction <- grades >= 80 > merit <- passing & ! distinction # Passing grade but NOT Distinction > grades[merit] [1] 73 55","title":"Indexing"},{"location":"R/vector-arithmetic/#indexing-functions","text":"","title":"Indexing functions"},{"location":"R/vector-arithmetic/#which","text":"The function which(x) returns the indices of entries in vector x which are TRUE . 1 2 3 4 5 6 7 8 9 > # Following previous example > distIndex <- which ( distinction ) > distIndex # Stores only indices which are TRUE, thus saving space [1] 4 > grades[distIndex] [1] 95 > notDistIndex <- which ( ! distinction ) # ! operator > grades[notDistIndex] [1] 43 73 23 55","title":"which"},{"location":"R/vector-arithmetic/#match","text":"The function match(x, y) returns the indices of entries in vector y which (first) matches entries in vector x . 1 2 3 4 5 6 7 > countries <- c ( \"MYS\" , \"SGP\" , \"IDN\" ) > codes <- c ( 60 , 65 , 62 ) > countryCodes <- data.frame ( name = countries , code <- codes ) > > ind <- match ( c ( \"SGP\" , \"IDN\" ), countryCodes $ name ) > countryCodes $ code[ind] [1] 65 62","title":"match"},{"location":"R/vector-arithmetic/#in-operator","text":"The operator y %in% x returns a logical vector of y length that evaluates TRUE if the entry in y is present in x . 1 2 3 > # Following previous example > c ( \"SGP\" , \"LOL\" ) %in% countryCodes $ name [1] TRUE FALSE","title":"%in% operator"},{"location":"R/vector-manipulation/","text":"R / Sort, order and rank \u00b6 This section covers sorting, ordering and ranking of vectors. sort \u00b6 The function sort(x) , sorts vector x in ascending order. 1 2 3 > data ( USArrests ) > sort ( USArrests $ Murder ) [1] 0.8 2.1 2.1 2.2 2.2 2.6 2.6 ... order \u00b6 The function order(x) returns the indices which sorts the vector x . 1 2 3 > x <- c ( 100 , 1 , 10 ) > order ( x ) [1] 2 3 1 The first entry of order(x) is 2 because the 2nd entry in vector x is the smallest value. 1 2 3 4 5 6 7 8 > murders <- USArrests $ Murder > x <- order ( murders ) # Get indices which sort murders in ascending order. > states <- rownames ( USArrests ) # Get names of states > states[x] # Output names of states sorted by murders in ascending order. [1] \"North Dakota\" \"Maine\" \"New Hampshire\" ... [50] \"Georgia\" > # North Dakota has the least murders while Georgia has the most. max and min \u00b6 Use max(x) and min(x) along with which.max(x) and which.min(x) functions if you only need the maximum and minimum values. 1 2 3 4 5 > max ( murders ) [1] 17.4 > y <- which.max ( murders ) > states[y] [1] \"Georgia\" rank \u00b6 The function rank(x) returns a vector which entries store the ranking of their corresponding entries in vector x . 1 2 3 4 5 6 7 > x <- c ( 100 , 1 , 10 ) > order ( x ) [1] 2 3 1 > rank ( x ) # Entries ranked lowest to highest [1] 3 1 2 > rank ( - x ) # Entries ranked highest to lowest [1] 1 3 2 The second entry of rank(x) is 1 because the second entry in vector x is the smallest value and hence has the lowest rank value.","title":"R / Sort, order and rank"},{"location":"R/vector-manipulation/#r-sort-order-and-rank","text":"This section covers sorting, ordering and ranking of vectors.","title":"R / Sort, order and rank"},{"location":"R/vector-manipulation/#sort","text":"The function sort(x) , sorts vector x in ascending order. 1 2 3 > data ( USArrests ) > sort ( USArrests $ Murder ) [1] 0.8 2.1 2.1 2.2 2.2 2.6 2.6 ...","title":"sort"},{"location":"R/vector-manipulation/#order","text":"The function order(x) returns the indices which sorts the vector x . 1 2 3 > x <- c ( 100 , 1 , 10 ) > order ( x ) [1] 2 3 1 The first entry of order(x) is 2 because the 2nd entry in vector x is the smallest value. 1 2 3 4 5 6 7 8 > murders <- USArrests $ Murder > x <- order ( murders ) # Get indices which sort murders in ascending order. > states <- rownames ( USArrests ) # Get names of states > states[x] # Output names of states sorted by murders in ascending order. [1] \"North Dakota\" \"Maine\" \"New Hampshire\" ... [50] \"Georgia\" > # North Dakota has the least murders while Georgia has the most.","title":"order"},{"location":"R/vector-manipulation/#max-and-min","text":"Use max(x) and min(x) along with which.max(x) and which.min(x) functions if you only need the maximum and minimum values. 1 2 3 4 5 > max ( murders ) [1] 17.4 > y <- which.max ( murders ) > states[y] [1] \"Georgia\"","title":"max and min"},{"location":"R/vector-manipulation/#rank","text":"The function rank(x) returns a vector which entries store the ranking of their corresponding entries in vector x . 1 2 3 4 5 6 7 > x <- c ( 100 , 1 , 10 ) > order ( x ) [1] 2 3 1 > rank ( x ) # Entries ranked lowest to highest [1] 3 1 2 > rank ( - x ) # Entries ranked highest to lowest [1] 1 3 2 The second entry of rank(x) is 1 because the second entry in vector x is the smallest value and hence has the lowest rank value.","title":"rank"},{"location":"R/vectors/","text":"R / Vectors and subsetting \u00b6 This section covers vector manipulation and specific access of entries in a vector via subsetting. Creating vectors \u00b6 c \u00b6 Use the function c which stands for concatenation. 1 2 3 4 > codes <- c ( 65 , 60 , 62 ) > countries <- c ( \"Singapore\" , \"Malaysia\" , \"Indonesia\" ) > countryCodes <- c ( Singapore = 65 , Malaysia = 60 , Indonesia = 62 ) # Still numeric > countryCodes <- c ( \"Singapore\" = 65 , \"Malaysia\" = 60 , \"Indonesia\" = 62 ) # Same as previous seq \u00b6 Use the function seq which stands for sequence. Simplest sequence generation 1 2 > seq ( 1 , 4 ) [1] 1 2 3 4 Sequence generation with increment defined using the by argument. 1 2 > seq ( 1 , 6 , 2 ) # Third argument is the `by` argument [1] 1 3 5 Shorthand operator 1 2 > 1 : 4 # Shorthand for consecutive integers [1] 1 2 3 4 Sequence generation with length defined using the length.out argument. 1 2 3 > fourNo <- seq ( 1 , 3 , length.out = 4 ) # Create 4 numbers between 1 and 3. > fourNo [1] 1.000000 1.666667 2.333333 3.000000 Naming vectors \u00b6 names(x) <- y : Assigns names to a vector x's entries using vector y's entries. For example: names(codes) <- countries produces a vector identical to countryCodes . Subsetting \u00b6 Access specific parts of a vector via subsetting. Single entry \u00b6 1 2 3 > codes[2] # Access second entry Malaysia 60 Multiple specific entries \u00b6 1 2 3 4 5 6 > codes [c ( 1 , 3 ) ] # Access first and third entry Singapore Indonesia 65 62 > codes [c ( \"Indonesia\" , \"Malaysia\" ) ] # Access by names Indonesia Malaysia 62 60 Multiple consecutive entries \u00b6 1 2 3 > codes[1 : 2 ] # Access first to second entry Singapore Malaysia 65 60","title":"R / Vectors and subsetting"},{"location":"R/vectors/#r-vectors-and-subsetting","text":"This section covers vector manipulation and specific access of entries in a vector via subsetting.","title":"R / Vectors and subsetting"},{"location":"R/vectors/#creating-vectors","text":"","title":"Creating vectors"},{"location":"R/vectors/#c","text":"Use the function c which stands for concatenation. 1 2 3 4 > codes <- c ( 65 , 60 , 62 ) > countries <- c ( \"Singapore\" , \"Malaysia\" , \"Indonesia\" ) > countryCodes <- c ( Singapore = 65 , Malaysia = 60 , Indonesia = 62 ) # Still numeric > countryCodes <- c ( \"Singapore\" = 65 , \"Malaysia\" = 60 , \"Indonesia\" = 62 ) # Same as previous","title":"c"},{"location":"R/vectors/#seq","text":"Use the function seq which stands for sequence. Simplest sequence generation 1 2 > seq ( 1 , 4 ) [1] 1 2 3 4 Sequence generation with increment defined using the by argument. 1 2 > seq ( 1 , 6 , 2 ) # Third argument is the `by` argument [1] 1 3 5 Shorthand operator 1 2 > 1 : 4 # Shorthand for consecutive integers [1] 1 2 3 4 Sequence generation with length defined using the length.out argument. 1 2 3 > fourNo <- seq ( 1 , 3 , length.out = 4 ) # Create 4 numbers between 1 and 3. > fourNo [1] 1.000000 1.666667 2.333333 3.000000","title":"seq"},{"location":"R/vectors/#naming-vectors","text":"names(x) <- y : Assigns names to a vector x's entries using vector y's entries. For example: names(codes) <- countries produces a vector identical to countryCodes .","title":"Naming vectors"},{"location":"R/vectors/#subsetting","text":"Access specific parts of a vector via subsetting.","title":"Subsetting"},{"location":"R/vectors/#single-entry","text":"1 2 3 > codes[2] # Access second entry Malaysia 60","title":"Single entry"},{"location":"R/vectors/#multiple-specific-entries","text":"1 2 3 4 5 6 > codes [c ( 1 , 3 ) ] # Access first and third entry Singapore Indonesia 65 62 > codes [c ( \"Indonesia\" , \"Malaysia\" ) ] # Access by names Indonesia Malaysia 62 60","title":"Multiple specific entries"},{"location":"R/vectors/#multiple-consecutive-entries","text":"1 2 3 > codes[1 : 2 ] # Access first to second entry Singapore Malaysia 65 60","title":"Multiple consecutive entries"},{"location":"c/arguments/","text":"Arguments \u00b6 Last updated on 10 Mar, 2019 In this section you will find my notes on command line arguments which are passed into the main() function. Print out arguments \u00b6 The example program below prints out all command line arguments passed into the main() function. print-arguments.c 1 2 3 4 5 6 7 #include <stdio.h> int main ( int argc , char ** argv ) { for ( int i = 0 ; i < argc ; i ++ ) { printf ( \"%s \\n \" , argv [ i ]); } } Key details: argc - the number of arguments passed into the program argv - the array of character pointers (strings) containing all arguments argv[0] - the first argument which is also the name of the program To use: Enter the above code into a file (e.g. print-arguments.c ). Compile the code with gcc print-arguments.c -o print-arguments . Run the executable with ./print-arguments test . Stuff to try \u00b6 Run the executable with ./print-arguments $USER to pass in the environment variable USER .","title":"Arguments"},{"location":"c/arguments/#arguments","text":"Last updated on 10 Mar, 2019 In this section you will find my notes on command line arguments which are passed into the main() function.","title":"Arguments"},{"location":"c/arguments/#print-out-arguments","text":"The example program below prints out all command line arguments passed into the main() function. print-arguments.c 1 2 3 4 5 6 7 #include <stdio.h> int main ( int argc , char ** argv ) { for ( int i = 0 ; i < argc ; i ++ ) { printf ( \"%s \\n \" , argv [ i ]); } } Key details: argc - the number of arguments passed into the program argv - the array of character pointers (strings) containing all arguments argv[0] - the first argument which is also the name of the program To use: Enter the above code into a file (e.g. print-arguments.c ). Compile the code with gcc print-arguments.c -o print-arguments . Run the executable with ./print-arguments test .","title":"Print out arguments"},{"location":"c/arguments/#stuff-to-try","text":"Run the executable with ./print-arguments $USER to pass in the environment variable USER .","title":"Stuff to try"},{"location":"git/ignoring-files/","text":"Ignoring files \u00b6 Last updated on 24 Mar, 2019 This section covers how to tell Git to ignore certain files and directories by using .gitignore files or the git update-index commands. Tip Basic knowledge of Git is assumed in this tutorial. If you are new to Git, visit http://rogerdudler.github.io/git-guide/ to learn the basics first. If you want a certain file or directory to be ignored for the long-term, you should choose to do so using .gitignore files. Otherwise, if you only want Git to ignore a certain file temporarily, before committing it at a later time, you should do so using the git update-index commands. Using .gitignore files \u00b6 Git uses .gitignore files to decide which files and directories to ignore before you commit. Files and directories specified in .gitignore will not be tracked nor staged when git add * or git commit -a commands are used. To ignore a file or directory using .gitignore : Create a .gitignore file in the desired location (e.g. the project's root directory). The .gitignore file affects all files and sub-directories in its directory. It recursively affects all files and directories in its sub-directories. Sub-directories with their own .gitignore file use their own .gitignore instead. Open the file and enter the filename or directory to be ignored (e.g. secret.txt ). See example below. Save the file and commit it. Commit it to share the ignore rules with other users using the same repository and also to version-control it. Example .gitignore file: 1 2 3 4 5 6 7 8 # Ignore specific file plaintext_password.txt # Ignore specific file type using wildcards *.html # Ignore specific directory site/ Warning If a file is already being tracked, adding it to .gitignore will not stop Git from tracking it. You will need to remove the file from the Git cache using the git rm --cached <file> command. After doing this, the file will no longer be tracked provided it is specified in .gitignore . Using git update-index \u00b6 If you want Git to temporarily ignore a file which you will commit at a later time, you can do so easily by using the git update-index commands to tell Git to stop and start tracking the file. To temporarily ignore (stop tracking) a file: 1 git update-index --assume-unchanged <file> To start tracking a file again: 1 git update-index --no-assume-unchanged <file> Tip Read the man page to find out more about git update-index rules. Resources \u00b6 gitscm's documentation for .gitignore : https://git-scm.com/docs/gitignore github's guide to ignoring files: https://help.github.com/en/articles/ignoring-files gitready's guide to ignoring files: http://gitready.com/beginner/2009/01/19/ignoring-files.html gitready's guide to temporarily ignoring files: http://gitready.com/intermediate/2009/02/18/temporarily-ignoring-files.html man page on git update-index : https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-update-index.html","title":"Ignoring files"},{"location":"git/ignoring-files/#ignoring-files","text":"Last updated on 24 Mar, 2019 This section covers how to tell Git to ignore certain files and directories by using .gitignore files or the git update-index commands. Tip Basic knowledge of Git is assumed in this tutorial. If you are new to Git, visit http://rogerdudler.github.io/git-guide/ to learn the basics first. If you want a certain file or directory to be ignored for the long-term, you should choose to do so using .gitignore files. Otherwise, if you only want Git to ignore a certain file temporarily, before committing it at a later time, you should do so using the git update-index commands.","title":"Ignoring files"},{"location":"git/ignoring-files/#using-gitignore-files","text":"Git uses .gitignore files to decide which files and directories to ignore before you commit. Files and directories specified in .gitignore will not be tracked nor staged when git add * or git commit -a commands are used. To ignore a file or directory using .gitignore : Create a .gitignore file in the desired location (e.g. the project's root directory). The .gitignore file affects all files and sub-directories in its directory. It recursively affects all files and directories in its sub-directories. Sub-directories with their own .gitignore file use their own .gitignore instead. Open the file and enter the filename or directory to be ignored (e.g. secret.txt ). See example below. Save the file and commit it. Commit it to share the ignore rules with other users using the same repository and also to version-control it. Example .gitignore file: 1 2 3 4 5 6 7 8 # Ignore specific file plaintext_password.txt # Ignore specific file type using wildcards *.html # Ignore specific directory site/ Warning If a file is already being tracked, adding it to .gitignore will not stop Git from tracking it. You will need to remove the file from the Git cache using the git rm --cached <file> command. After doing this, the file will no longer be tracked provided it is specified in .gitignore .","title":"Using .gitignore files"},{"location":"git/ignoring-files/#using-git-update-index","text":"If you want Git to temporarily ignore a file which you will commit at a later time, you can do so easily by using the git update-index commands to tell Git to stop and start tracking the file. To temporarily ignore (stop tracking) a file: 1 git update-index --assume-unchanged <file> To start tracking a file again: 1 git update-index --no-assume-unchanged <file> Tip Read the man page to find out more about git update-index rules.","title":"Using git update-index"},{"location":"git/ignoring-files/#resources","text":"gitscm's documentation for .gitignore : https://git-scm.com/docs/gitignore github's guide to ignoring files: https://help.github.com/en/articles/ignoring-files gitready's guide to ignoring files: http://gitready.com/beginner/2009/01/19/ignoring-files.html gitready's guide to temporarily ignoring files: http://gitready.com/intermediate/2009/02/18/temporarily-ignoring-files.html man page on git update-index : https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-update-index.html","title":"Resources"},{"location":"heroku/quick-deploy/","text":"Quick-deploy \u00b6 Last updated on 12 Jan, 2020 The purpose of this page is to quickly deploy code in an existing Git repository to Heroku. Warning This is a quick reference guide. It is not meant to be an informative tutorial. For more information, view the #Resources section. Steps \u00b6 Note It is assumed that Git and Heroku CLI has been installed. At the root of your Git repository, run the following commands: 1 2 3 4 5 # Create a new Heroku application. heroku create # Deploy to Heroku. git push heroku master Debug \u00b6 Problem 1 \u00b6 Heroku remote repo not added as heroku automatically by heroku create command: 1 2 3 4 5 # Verify that 'heroku' has not been added git remote -v # If 'heroku' is not found in the remote list, add it git remote add heroku <link-to-the-Heroku-repo> Resources \u00b6 Heroku Dev Center's documentation for Deploying with Git : https://devcenter.heroku.com/articles/git","title":"Quick-deploy"},{"location":"heroku/quick-deploy/#quick-deploy","text":"Last updated on 12 Jan, 2020 The purpose of this page is to quickly deploy code in an existing Git repository to Heroku. Warning This is a quick reference guide. It is not meant to be an informative tutorial. For more information, view the #Resources section.","title":"Quick-deploy"},{"location":"heroku/quick-deploy/#steps","text":"Note It is assumed that Git and Heroku CLI has been installed. At the root of your Git repository, run the following commands: 1 2 3 4 5 # Create a new Heroku application. heroku create # Deploy to Heroku. git push heroku master","title":"Steps"},{"location":"heroku/quick-deploy/#debug","text":"","title":"Debug"},{"location":"heroku/quick-deploy/#problem-1","text":"Heroku remote repo not added as heroku automatically by heroku create command: 1 2 3 4 5 # Verify that 'heroku' has not been added git remote -v # If 'heroku' is not found in the remote list, add it git remote add heroku <link-to-the-Heroku-repo>","title":"Problem 1"},{"location":"heroku/quick-deploy/#resources","text":"Heroku Dev Center's documentation for Deploying with Git : https://devcenter.heroku.com/articles/git","title":"Resources"},{"location":"probability-statistics/intro-probability/","text":"Introduction to Probability \u00b6 This set of notes was prepared for Stanford University's CME 106: Introduction to Probability and Statistics for Engineers, which I took under Vadim Khayms in Summer 2019 . This page covers: Sample spaces, events Axioms of probability Counting, permutations Resources \u00b6 Sheldon M. Ross's book: Introduction to Probability and Statistics for Engineers and Scientists Shervine's CME 106 online cheat sheets: https://stanford.edu/~shervine/teaching/cme-106/ Sample space S \u00b6 S is the set of all possible outcomes of an experiment. All elements in S has to be mutually exclusive (disjoint). Discrete S \u00b6 A discrete sample space is countable: The sex of a newborn child: S = {M, F} Continuous S \u00b6 A continuous sample space is not countable: S = (0, \u221e) Events E \u00b6 Any subset of the sample space is known as an event E . E is a set consisting of possible outcomes of an experiment. Events of a sample space S are mutually exclusive if they do not share common elements. For any two events E and F , we can define a new event through: Union of events E \u222a F \u00b6 E \u222a F is the union of E and F . It consists of all outcomes that are either in E or F or both. Intersection of events EF \u00b6 EF is the intersection of E and F . It consists of all outcomes that are in both E and F . Complement of event E c \u00b6 E c is the complement of E . It consists of all outcomes in S which are not in E . For any two events E and F : Subset of event E \u2282 F \u00b6 If all outcomes in E are also in F , then E is contained within F . Operation rules \u00b6 Commutative law: E \u222a F = F \u222a E and EF = FE Associative law: ( E \u222a F )\u222a G = E \u222a( F \u222a G ) and ( EF ) G = E ( FG ) Distributive law: ( E \u222a F ) G = ( EG )\u222a( FG ) and ( EF )\u222a G = ( E \u222a G )( F \u222a G ) DeMorgan's law: ( E \u222a F ) c = E c F c and ( EF ) c = E c \u222a F c Axioms of probability \u00b6 For every event E , we denote P( E ) as the probability of E occurring. Axiom 1: 0 \u2a7d P(E) \u2a7d 1 Every probability is between 0 and 1 (inclusive). Axiom 2: P(S) = 1 The outcome will be a member of S . Axiom 3: Equation picture by Wikipedia For any set of mutually exclusive events, the probability that at least one event occurs is equal to the sum of all their respective probabilities. Example: If AB \u2260 \u2205 (not mutually exclusive), then P(A\u222aB) = P(A) + P(B) - P(AB) If AB = \u2205 (mutually exclusive), then P(A\u222aB) = P(A) + P(B)","title":"Introduction to Probability"},{"location":"probability-statistics/intro-probability/#introduction-to-probability","text":"This set of notes was prepared for Stanford University's CME 106: Introduction to Probability and Statistics for Engineers, which I took under Vadim Khayms in Summer 2019 . This page covers: Sample spaces, events Axioms of probability Counting, permutations","title":"Introduction to Probability"},{"location":"probability-statistics/intro-probability/#resources","text":"Sheldon M. Ross's book: Introduction to Probability and Statistics for Engineers and Scientists Shervine's CME 106 online cheat sheets: https://stanford.edu/~shervine/teaching/cme-106/","title":"Resources"},{"location":"probability-statistics/intro-probability/#sample-space-s","text":"S is the set of all possible outcomes of an experiment. All elements in S has to be mutually exclusive (disjoint).","title":"Sample space S"},{"location":"probability-statistics/intro-probability/#discrete-s","text":"A discrete sample space is countable: The sex of a newborn child: S = {M, F}","title":"Discrete S"},{"location":"probability-statistics/intro-probability/#continuous-s","text":"A continuous sample space is not countable: S = (0, \u221e)","title":"Continuous S"},{"location":"probability-statistics/intro-probability/#events-e","text":"Any subset of the sample space is known as an event E . E is a set consisting of possible outcomes of an experiment. Events of a sample space S are mutually exclusive if they do not share common elements. For any two events E and F , we can define a new event through:","title":"Events E"},{"location":"probability-statistics/intro-probability/#union-of-events-ef","text":"E \u222a F is the union of E and F . It consists of all outcomes that are either in E or F or both.","title":"Union of events E\u222aF"},{"location":"probability-statistics/intro-probability/#intersection-of-events-ef","text":"EF is the intersection of E and F . It consists of all outcomes that are in both E and F .","title":"Intersection of events EF"},{"location":"probability-statistics/intro-probability/#complement-of-event-ec","text":"E c is the complement of E . It consists of all outcomes in S which are not in E . For any two events E and F :","title":"Complement of event Ec"},{"location":"probability-statistics/intro-probability/#subset-of-event-ef","text":"If all outcomes in E are also in F , then E is contained within F .","title":"Subset of event E\u2282F"},{"location":"probability-statistics/intro-probability/#operation-rules","text":"Commutative law: E \u222a F = F \u222a E and EF = FE Associative law: ( E \u222a F )\u222a G = E \u222a( F \u222a G ) and ( EF ) G = E ( FG ) Distributive law: ( E \u222a F ) G = ( EG )\u222a( FG ) and ( EF )\u222a G = ( E \u222a G )( F \u222a G ) DeMorgan's law: ( E \u222a F ) c = E c F c and ( EF ) c = E c \u222a F c","title":"Operation rules"},{"location":"probability-statistics/intro-probability/#axioms-of-probability","text":"For every event E , we denote P( E ) as the probability of E occurring. Axiom 1: 0 \u2a7d P(E) \u2a7d 1 Every probability is between 0 and 1 (inclusive). Axiom 2: P(S) = 1 The outcome will be a member of S . Axiom 3: Equation picture by Wikipedia For any set of mutually exclusive events, the probability that at least one event occurs is equal to the sum of all their respective probabilities. Example: If AB \u2260 \u2205 (not mutually exclusive), then P(A\u222aB) = P(A) + P(B) - P(AB) If AB = \u2205 (mutually exclusive), then P(A\u222aB) = P(A) + P(B)","title":"Axioms of probability"}]}