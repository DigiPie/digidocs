{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DigiDocs \u00b6 Last updated on 17 May, 2020 Chapters \u00b6 Check out my notes here: Title Last updated Latest article Remarks Full-Stack May 2020 Set-npm-run-shell MongoDB and NodeJS Git May 2020 Cheat-sheet - Tech-Ops Feb 2020 Heroku-quick-deploy Docker, Heroku and Ubuntu Others Mar 2019 C/Arguments C arguments What is this \u00b6 DigiDocs is a collection of concise, to-the-point tutorials and references for my personal use. It is a way for me to document what I learn in a concise manner. I do so because I want to minimise time spent re-learning things. Who is this by \u00b6 Hi, I am Evan , a Computer Science undergraduate at the National University of Singapore . You can find out more about me by visiting my website .","title":"Home"},{"location":"#digidocs","text":"Last updated on 17 May, 2020","title":"DigiDocs"},{"location":"#chapters","text":"Check out my notes here: Title Last updated Latest article Remarks Full-Stack May 2020 Set-npm-run-shell MongoDB and NodeJS Git May 2020 Cheat-sheet - Tech-Ops Feb 2020 Heroku-quick-deploy Docker, Heroku and Ubuntu Others Mar 2019 C/Arguments C arguments","title":"Chapters"},{"location":"#what-is-this","text":"DigiDocs is a collection of concise, to-the-point tutorials and references for my personal use. It is a way for me to document what I learn in a concise manner. I do so because I want to minimise time spent re-learning things.","title":"What is this"},{"location":"#who-is-this-by","text":"Hi, I am Evan , a Computer Science undergraduate at the National University of Singapore . You can find out more about me by visiting my website .","title":"Who is this by"},{"location":"full-stack/mongodb/cheat-sheet/","text":"Cheat-sheet \u00b6 Last updated on 19 Jan, 2020 The purpose of this page is to summarise key mongodb commands you will always use. Print a collection's documents \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 # Select the database show dbs use <db-name> # Show all collections in the database show collections # Print out all documents in the database db.<collection-name>.find () # Print out in an easy-to-read but less compact format db.<collection-name>.find () .pretty () Delete documents \u00b6 1 2 3 4 5 6 7 8 9 10 show dbs use <db-name> # Show all collections in the database show collections # Remove all documents in the collection db.<collection-name>.remove ( { } ) # See reference for more information Resources \u00b6 MongoDB's official guide to mongo Shell Quick Reference : https://docs.mongodb.com/manual/reference/mongo-shell/ MongoDB's official guide to db.collection.remove() : https://docs.mongodb.com/manual/reference/method/db.collection.remove/","title":"Cheat-sheet"},{"location":"full-stack/mongodb/cheat-sheet/#cheat-sheet","text":"Last updated on 19 Jan, 2020 The purpose of this page is to summarise key mongodb commands you will always use.","title":"Cheat-sheet"},{"location":"full-stack/mongodb/cheat-sheet/#print-a-collections-documents","text":"1 2 3 4 5 6 7 8 9 10 11 12 # Select the database show dbs use <db-name> # Show all collections in the database show collections # Print out all documents in the database db.<collection-name>.find () # Print out in an easy-to-read but less compact format db.<collection-name>.find () .pretty ()","title":"Print a collection's documents"},{"location":"full-stack/mongodb/cheat-sheet/#delete-documents","text":"1 2 3 4 5 6 7 8 9 10 show dbs use <db-name> # Show all collections in the database show collections # Remove all documents in the collection db.<collection-name>.remove ( { } ) # See reference for more information","title":"Delete documents"},{"location":"full-stack/mongodb/cheat-sheet/#resources","text":"MongoDB's official guide to mongo Shell Quick Reference : https://docs.mongodb.com/manual/reference/mongo-shell/ MongoDB's official guide to db.collection.remove() : https://docs.mongodb.com/manual/reference/method/db.collection.remove/","title":"Resources"},{"location":"full-stack/mongodb/local-setup/","text":"Local-setup \u00b6 Last updated on 13 Jan, 2020 The purpose of this page is to quickly set up a local copy of MongoDB on Windows for local development purposes. Authentication will not be enabled or covered in this tutorial. Installation and config \u00b6 Install MongoDB Community Edition , the standard configuration is fine. Take note of where your installation's bin folder is at, it should be at C:\\Program Files\\MongoDB\\Server\\4.2\\bin by default. Add it to your environment variables. See guide here . Open your terminal - if you already have it opened, exit and re-open it to reload the enviroment variables. Enter mongo to access MongoDB. Create a new collection \u00b6 Next, create a new collection, use the use command: 1 2 3 4 5 6 7 8 9 # To display the database you are using db # To switch databases use `use <database>` # To create a new database, switch to a non-existing database use dev # Template use <database> Info Read https://docs.mongodb.com/manual/mongo/ for more information. Create a new user \u00b6 Next, create a user with readWrite and dbAdmin roles, using the db.createUser() command: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Switch to the database you want to add the user to use dev # Create the user with `readWrite` and `dbAdmin` rights db.createUser ( { user: \"devadmin\" , pwd: passwordPrompt () , roles: [ \"readWrite\" , \"dbAdmin\" ] } ) # Template db.createUser ( { user: <username>, pwd: <password>, roles: [ \"readWrite\" , \"dbAdmin\" ] } ) Info Read https://docs.mongodb.com/manual/reference/method/db.createUser/ for more information. connection-string format \u00b6 The connection-string is used to access the MongoDB instance from your applications (i.e. MongooseJS). The format of your connection-string is as follows: 1 2 3 4 5 6 7 8 9 mongodb:// [ username:password@ ] host1 [ :port1 ][ ,...hostN [ :portN ]][ / [ database ][ ?options ]] # Parts in [ and ] are optional # Example, without authentication mongodb://localhost:27017/dev # Example, with authentication mongodb://devadmin:<password>@localhost:27017/dev # Replace the <password> with your actual password Warning If the username or password includes the at sign @, colon :, slash /, or the percent sign % character, use percent encoding. See https://docs.mongodb.com/manual/reference/connection-string/#examples for more information. Authentication \u00b6 Given that we are not enabling authentication, you can use either of the above connection-string URI formats. Info Read https://docs.mongodb.com/manual/tutorial/enable-authentication/ for more information. Verify connection-string \u00b6 To verify your connection-string, simply use mongo <mongoURI> : 1 2 3 4 5 # Example, without authentication mongo mongodb://localhost:27017/dev # Example, with authentication mongo mongodb://devadmin:<password>@localhost:27017/dev Resources \u00b6 MongoDB's official guide to Install MongoDB Community Edition : https://docs.mongodb.com/manual/administration/install-community/ Architect Ryan's guide to Add to the PATH on Windows 10 : https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/ MongoDB's official guide to The mongo Shell : https://docs.mongodb.com/manual/mongo/ MongoDB's official guide to db.createUser() : https://docs.mongodb.com/manual/reference/method/db.createUser/ MongoDB's official guide to Connection String URI Format : https://docs.mongodb.com/manual/reference/connection-string/ MongoDB's official guide to Enable Access Control : https://docs.mongodb.com/manual/tutorial/enable-authentication/","title":"Local-setup"},{"location":"full-stack/mongodb/local-setup/#local-setup","text":"Last updated on 13 Jan, 2020 The purpose of this page is to quickly set up a local copy of MongoDB on Windows for local development purposes. Authentication will not be enabled or covered in this tutorial.","title":"Local-setup"},{"location":"full-stack/mongodb/local-setup/#installation-and-config","text":"Install MongoDB Community Edition , the standard configuration is fine. Take note of where your installation's bin folder is at, it should be at C:\\Program Files\\MongoDB\\Server\\4.2\\bin by default. Add it to your environment variables. See guide here . Open your terminal - if you already have it opened, exit and re-open it to reload the enviroment variables. Enter mongo to access MongoDB.","title":"Installation and config"},{"location":"full-stack/mongodb/local-setup/#create-a-new-collection","text":"Next, create a new collection, use the use command: 1 2 3 4 5 6 7 8 9 # To display the database you are using db # To switch databases use `use <database>` # To create a new database, switch to a non-existing database use dev # Template use <database> Info Read https://docs.mongodb.com/manual/mongo/ for more information.","title":"Create a new collection"},{"location":"full-stack/mongodb/local-setup/#create-a-new-user","text":"Next, create a user with readWrite and dbAdmin roles, using the db.createUser() command: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Switch to the database you want to add the user to use dev # Create the user with `readWrite` and `dbAdmin` rights db.createUser ( { user: \"devadmin\" , pwd: passwordPrompt () , roles: [ \"readWrite\" , \"dbAdmin\" ] } ) # Template db.createUser ( { user: <username>, pwd: <password>, roles: [ \"readWrite\" , \"dbAdmin\" ] } ) Info Read https://docs.mongodb.com/manual/reference/method/db.createUser/ for more information.","title":"Create a new user"},{"location":"full-stack/mongodb/local-setup/#connection-string-format","text":"The connection-string is used to access the MongoDB instance from your applications (i.e. MongooseJS). The format of your connection-string is as follows: 1 2 3 4 5 6 7 8 9 mongodb:// [ username:password@ ] host1 [ :port1 ][ ,...hostN [ :portN ]][ / [ database ][ ?options ]] # Parts in [ and ] are optional # Example, without authentication mongodb://localhost:27017/dev # Example, with authentication mongodb://devadmin:<password>@localhost:27017/dev # Replace the <password> with your actual password Warning If the username or password includes the at sign @, colon :, slash /, or the percent sign % character, use percent encoding. See https://docs.mongodb.com/manual/reference/connection-string/#examples for more information.","title":"connection-string format"},{"location":"full-stack/mongodb/local-setup/#authentication","text":"Given that we are not enabling authentication, you can use either of the above connection-string URI formats. Info Read https://docs.mongodb.com/manual/tutorial/enable-authentication/ for more information.","title":"Authentication"},{"location":"full-stack/mongodb/local-setup/#verify-connection-string","text":"To verify your connection-string, simply use mongo <mongoURI> : 1 2 3 4 5 # Example, without authentication mongo mongodb://localhost:27017/dev # Example, with authentication mongo mongodb://devadmin:<password>@localhost:27017/dev","title":"Verify connection-string"},{"location":"full-stack/mongodb/local-setup/#resources","text":"MongoDB's official guide to Install MongoDB Community Edition : https://docs.mongodb.com/manual/administration/install-community/ Architect Ryan's guide to Add to the PATH on Windows 10 : https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/ MongoDB's official guide to The mongo Shell : https://docs.mongodb.com/manual/mongo/ MongoDB's official guide to db.createUser() : https://docs.mongodb.com/manual/reference/method/db.createUser/ MongoDB's official guide to Connection String URI Format : https://docs.mongodb.com/manual/reference/connection-string/ MongoDB's official guide to Enable Access Control : https://docs.mongodb.com/manual/tutorial/enable-authentication/","title":"Resources"},{"location":"full-stack/nodejs/auto-reload/","text":"Auto-reload \u00b6 Last updated on 12 Jan, 2020 Problem: Manually reloading the NodeJS server by hitting Ctrl + C and entering npm start repeatedly in development is exhausting. Solution: Automatically reload the server each time there is a change! Nodemon \u00b6 Quote Nodemon is a utility that will monitor for any changes in your source and automatically restart your server. How-to-use \u00b6 1 npm i -g nodemon Install nodemon : npm i -g nodemon . Replace node with nodemon in your command. For example, change node index.js to nodemon index.js . That's it. Add to npm scripts \u00b6 You can also add it to npm scripts to make life even easier. 1 2 3 4 5 6 7 8 { ... \"scripts\" : { \"start\" : \"node index.js\" , \"dev\" : \"nodemon index.js\" }, ... } After doing so, you can enter npm run dev subsequently, which will resolve to nodemon index.js . Resources \u00b6 Nodemon's landing page: https://nodemon.io/","title":"Auto-reload"},{"location":"full-stack/nodejs/auto-reload/#auto-reload","text":"Last updated on 12 Jan, 2020 Problem: Manually reloading the NodeJS server by hitting Ctrl + C and entering npm start repeatedly in development is exhausting. Solution: Automatically reload the server each time there is a change!","title":"Auto-reload"},{"location":"full-stack/nodejs/auto-reload/#nodemon","text":"Quote Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.","title":"Nodemon"},{"location":"full-stack/nodejs/auto-reload/#how-to-use","text":"1 npm i -g nodemon Install nodemon : npm i -g nodemon . Replace node with nodemon in your command. For example, change node index.js to nodemon index.js . That's it.","title":"How-to-use"},{"location":"full-stack/nodejs/auto-reload/#add-to-npm-scripts","text":"You can also add it to npm scripts to make life even easier. 1 2 3 4 5 6 7 8 { ... \"scripts\" : { \"start\" : \"node index.js\" , \"dev\" : \"nodemon index.js\" }, ... } After doing so, you can enter npm run dev subsequently, which will resolve to nodemon index.js .","title":"Add to npm scripts"},{"location":"full-stack/nodejs/auto-reload/#resources","text":"Nodemon's landing page: https://nodemon.io/","title":"Resources"},{"location":"full-stack/nodejs/set-npm-run-shell/","text":"set-npm-run-shell \u00b6 Last updated on 17 May, 2020 This article covers how you can set the shell used when you run the npm run scripts. Example scenario \u00b6 You are a Windows user who just started working on a new NodeJS project. While following through the \"Getting Started\" guide, you were instructed to run one or more npm run scripts such as npm run dev . These commands fail with errors. Upon checking, you realise that the reason why these commands fail is because they contains Bash (shell) commands not available to your Windows shell. You proceed to install Git Bash for Windows , and then re-run the command again using Git Bash instead. It still fails. It seems like npm run scripts still uses your Windows shell for execution. The one-line solution \u00b6 Tell npm config what shell you want your npm run scripts to be executed with (in this case, the Git Bash shell): npm config set script-shell \"C:\\\\Program Files\\\\git\\\\bin\\\\bash.exe\" Note It is assumed that your Git Bash executable file is located at \"C:\\Program Files\\git\\bin\\bash.exe\", which is the default installation location. If it is not, amend the path accordingly. Resources \u00b6 npmjs.com's documentation for npm config : https://docs.npmjs.com/misc/config","title":"Set-npm-run-shell"},{"location":"full-stack/nodejs/set-npm-run-shell/#set-npm-run-shell","text":"Last updated on 17 May, 2020 This article covers how you can set the shell used when you run the npm run scripts.","title":"set-npm-run-shell"},{"location":"full-stack/nodejs/set-npm-run-shell/#example-scenario","text":"You are a Windows user who just started working on a new NodeJS project. While following through the \"Getting Started\" guide, you were instructed to run one or more npm run scripts such as npm run dev . These commands fail with errors. Upon checking, you realise that the reason why these commands fail is because they contains Bash (shell) commands not available to your Windows shell. You proceed to install Git Bash for Windows , and then re-run the command again using Git Bash instead. It still fails. It seems like npm run scripts still uses your Windows shell for execution.","title":"Example scenario"},{"location":"full-stack/nodejs/set-npm-run-shell/#the-one-line-solution","text":"Tell npm config what shell you want your npm run scripts to be executed with (in this case, the Git Bash shell): npm config set script-shell \"C:\\\\Program Files\\\\git\\\\bin\\\\bash.exe\" Note It is assumed that your Git Bash executable file is located at \"C:\\Program Files\\git\\bin\\bash.exe\", which is the default installation location. If it is not, amend the path accordingly.","title":"The one-line solution"},{"location":"full-stack/nodejs/set-npm-run-shell/#resources","text":"npmjs.com's documentation for npm config : https://docs.npmjs.com/misc/config","title":"Resources"},{"location":"git/cheat-sheet/","text":"Cheat-sheet \u00b6 Last updated on 14 May, 2020 This section covers various common git use-cases. Tip Basic knowledge of Git is assumed in this tutorial. If you are new to Git, visit http://rogerdudler.github.io/git-guide/ to learn the basics first. Delete local and remote branches \u00b6 Example scenario: I have merged my development branch feat/new-feature into develop and wish to delete the local and remote branch of feat/new-feature now. The solution: Delete the local branch: git branch -d feat/new-feature or with --force : git branch -D feat/new-feature Delete the remote branch: git push <remote> -d <branch> The general command format it is based on: Delete a local branch: git branch -d|--delete <branch> or with --force : git branch -D <branch> Delete a remote branch: git push <remote> -d|--delete <branch> Reset a branch \u00b6 Example scenario: I messed up my local master branch. I want to reset it such that it will revert to being the same as origin/master . The one-line solution: git checkout -B master origin/master The general command format it is based on: git checkout -b|-B <new_branch> [<start point>] How does it work? git checkout -b|-B <new_branch> is typically used to create and switch to a new branch. However, if <new_branch> already exists, it will be reset instead. Cite If -B is given, <new_branch> is created if it doesn\u2019t exist; otherwise, it is reset. Resources \u00b6 gitscm's documentation for branch : https://git-scm.com/docs/git-branch gitscm's documentation for checkout : https://git-scm.com/docs/git-checkout gitscm's documentation for push : https://git-scm.com/docs/git-push","title":"Cheat-sheet"},{"location":"git/cheat-sheet/#cheat-sheet","text":"Last updated on 14 May, 2020 This section covers various common git use-cases. Tip Basic knowledge of Git is assumed in this tutorial. If you are new to Git, visit http://rogerdudler.github.io/git-guide/ to learn the basics first.","title":"Cheat-sheet"},{"location":"git/cheat-sheet/#delete-local-and-remote-branches","text":"Example scenario: I have merged my development branch feat/new-feature into develop and wish to delete the local and remote branch of feat/new-feature now. The solution: Delete the local branch: git branch -d feat/new-feature or with --force : git branch -D feat/new-feature Delete the remote branch: git push <remote> -d <branch> The general command format it is based on: Delete a local branch: git branch -d|--delete <branch> or with --force : git branch -D <branch> Delete a remote branch: git push <remote> -d|--delete <branch>","title":"Delete local and remote branches"},{"location":"git/cheat-sheet/#reset-a-branch","text":"Example scenario: I messed up my local master branch. I want to reset it such that it will revert to being the same as origin/master . The one-line solution: git checkout -B master origin/master The general command format it is based on: git checkout -b|-B <new_branch> [<start point>] How does it work? git checkout -b|-B <new_branch> is typically used to create and switch to a new branch. However, if <new_branch> already exists, it will be reset instead. Cite If -B is given, <new_branch> is created if it doesn\u2019t exist; otherwise, it is reset.","title":"Reset a branch"},{"location":"git/cheat-sheet/#resources","text":"gitscm's documentation for branch : https://git-scm.com/docs/git-branch gitscm's documentation for checkout : https://git-scm.com/docs/git-checkout gitscm's documentation for push : https://git-scm.com/docs/git-push","title":"Resources"},{"location":"git/ignoring-files/","text":"Ignoring files \u00b6 Last updated on 24 Mar, 2019 This section covers how to tell Git to ignore certain files and directories by using .gitignore files or the git update-index commands. Tip Basic knowledge of Git is assumed in this tutorial. If you are new to Git, visit http://rogerdudler.github.io/git-guide/ to learn the basics first. If you want a certain file or directory to be ignored for the long-term, you should choose to do so using .gitignore files. Otherwise, if you only want Git to ignore a certain file temporarily, before committing it at a later time, you should do so using the git update-index commands. Using .gitignore files \u00b6 Git uses .gitignore files to decide which files and directories to ignore before you commit. Files and directories specified in .gitignore will not be tracked nor staged when git add * or git commit -a commands are used. To ignore a file or directory using .gitignore : Create a .gitignore file in the desired location (e.g. the project's root directory). The .gitignore file affects all files and sub-directories in its directory. It recursively affects all files and directories in its sub-directories. Sub-directories with their own .gitignore file use their own .gitignore instead. Open the file and enter the filename or directory to be ignored (e.g. secret.txt ). See example below. Save the file and commit it. Commit it to share the ignore rules with other users using the same repository and also to version-control it. Example .gitignore file: 1 2 3 4 5 6 7 8 # Ignore specific file plaintext_password.txt # Ignore specific file type using wildcards *.html # Ignore specific directory site/ Warning If a file is already being tracked, adding it to .gitignore will not stop Git from tracking it. You will need to remove the file from the Git cache using the git rm --cached <file> command. After doing this, the file will no longer be tracked provided it is specified in .gitignore . Using git update-index \u00b6 If you want Git to temporarily ignore a file which you will commit at a later time, you can do so easily by using the git update-index commands to tell Git to stop and start tracking the file. To temporarily ignore (stop tracking) a file: 1 git update-index --assume-unchanged <file> To start tracking a file again: 1 git update-index --no-assume-unchanged <file> Tip Read the man page to find out more about git update-index rules. Resources \u00b6 gitscm's documentation for .gitignore : https://git-scm.com/docs/gitignore github's guide to ignoring files: https://help.github.com/en/articles/ignoring-files gitready's guide to ignoring files: http://gitready.com/beginner/2009/01/19/ignoring-files.html gitready's guide to temporarily ignoring files: http://gitready.com/intermediate/2009/02/18/temporarily-ignoring-files.html man page on git update-index : https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-update-index.html","title":"Ignoring files"},{"location":"git/ignoring-files/#ignoring-files","text":"Last updated on 24 Mar, 2019 This section covers how to tell Git to ignore certain files and directories by using .gitignore files or the git update-index commands. Tip Basic knowledge of Git is assumed in this tutorial. If you are new to Git, visit http://rogerdudler.github.io/git-guide/ to learn the basics first. If you want a certain file or directory to be ignored for the long-term, you should choose to do so using .gitignore files. Otherwise, if you only want Git to ignore a certain file temporarily, before committing it at a later time, you should do so using the git update-index commands.","title":"Ignoring files"},{"location":"git/ignoring-files/#using-gitignore-files","text":"Git uses .gitignore files to decide which files and directories to ignore before you commit. Files and directories specified in .gitignore will not be tracked nor staged when git add * or git commit -a commands are used. To ignore a file or directory using .gitignore : Create a .gitignore file in the desired location (e.g. the project's root directory). The .gitignore file affects all files and sub-directories in its directory. It recursively affects all files and directories in its sub-directories. Sub-directories with their own .gitignore file use their own .gitignore instead. Open the file and enter the filename or directory to be ignored (e.g. secret.txt ). See example below. Save the file and commit it. Commit it to share the ignore rules with other users using the same repository and also to version-control it. Example .gitignore file: 1 2 3 4 5 6 7 8 # Ignore specific file plaintext_password.txt # Ignore specific file type using wildcards *.html # Ignore specific directory site/ Warning If a file is already being tracked, adding it to .gitignore will not stop Git from tracking it. You will need to remove the file from the Git cache using the git rm --cached <file> command. After doing this, the file will no longer be tracked provided it is specified in .gitignore .","title":"Using .gitignore files"},{"location":"git/ignoring-files/#using-git-update-index","text":"If you want Git to temporarily ignore a file which you will commit at a later time, you can do so easily by using the git update-index commands to tell Git to stop and start tracking the file. To temporarily ignore (stop tracking) a file: 1 git update-index --assume-unchanged <file> To start tracking a file again: 1 git update-index --no-assume-unchanged <file> Tip Read the man page to find out more about git update-index rules.","title":"Using git update-index"},{"location":"git/ignoring-files/#resources","text":"gitscm's documentation for .gitignore : https://git-scm.com/docs/gitignore github's guide to ignoring files: https://help.github.com/en/articles/ignoring-files gitready's guide to ignoring files: http://gitready.com/beginner/2009/01/19/ignoring-files.html gitready's guide to temporarily ignoring files: http://gitready.com/intermediate/2009/02/18/temporarily-ignoring-files.html man page on git update-index : https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-update-index.html","title":"Resources"},{"location":"others/c/arguments/","text":"Arguments \u00b6 Last updated on 10 Mar, 2019 In this section you will find my notes on command line arguments which are passed into the main() function. Print out arguments \u00b6 The example program below prints out all command line arguments passed into the main() function. print-arguments.c 1 2 3 4 5 6 7 #include <stdio.h> int main ( int argc , char ** argv ) { for ( int i = 0 ; i < argc ; i ++ ) { printf ( \"%s \\n \" , argv [ i ]); } } Key details: argc - the number of arguments passed into the program argv - the array of character pointers (strings) containing all arguments argv[0] - the first argument which is also the name of the program To use: Enter the above code into a file (e.g. print-arguments.c ). Compile the code with gcc print-arguments.c -o print-arguments . Run the executable with ./print-arguments test . Stuff to try \u00b6 Run the executable with ./print-arguments $USER to pass in the environment variable USER .","title":"Arguments"},{"location":"others/c/arguments/#arguments","text":"Last updated on 10 Mar, 2019 In this section you will find my notes on command line arguments which are passed into the main() function.","title":"Arguments"},{"location":"others/c/arguments/#print-out-arguments","text":"The example program below prints out all command line arguments passed into the main() function. print-arguments.c 1 2 3 4 5 6 7 #include <stdio.h> int main ( int argc , char ** argv ) { for ( int i = 0 ; i < argc ; i ++ ) { printf ( \"%s \\n \" , argv [ i ]); } } Key details: argc - the number of arguments passed into the program argv - the array of character pointers (strings) containing all arguments argv[0] - the first argument which is also the name of the program To use: Enter the above code into a file (e.g. print-arguments.c ). Compile the code with gcc print-arguments.c -o print-arguments . Run the executable with ./print-arguments test .","title":"Print out arguments"},{"location":"others/c/arguments/#stuff-to-try","text":"Run the executable with ./print-arguments $USER to pass in the environment variable USER .","title":"Stuff to try"},{"location":"tech-ops/docker/","text":"Docker \u00b6 Last updated on 10 Mar, 2019 In this section you will find my notes on using Docker for the deployment of Git projects. Docker and Github \u00b6 Deploy script \u00b6 This script assumes that the working directory contains a .git directory, Dockerfile and package.json . A .gitignore and a .dockerignore file may be useful too. It is also assumed that the project dependencies have been installed using npm install . deploy.sh 1 2 3 4 5 6 7 8 9 10 IMAGE_NAME = \"<IMAGE>\" CONTAINER_NAME = \"<NAME>\" CONTAINER_PORT = \"<PORT_1>\" # To be mapped to HOST_PORT HOST_PORT = \"<PORT_2>\" # The port clients will access docker stop $CONTAINER_NAME docker system prune -af # Removes the container and all unused images git pull origin master # Pulls latest source files and image docker build -t $IMAGE_NAME . docker run --name $CONTAINER_NAME -p $CONTAINER_PORT : $HOST_PORT -d $IMAGE_NAME Before the script can be used, replace the following placeholders: <IMAGE> : The name of your image. <NAME> : The desired name of your container. <PORT_1> : The port of your container which your application is running on. <PORT_2> : The host port your container port will be mapped to. Resources \u00b6 How To Build a Node.js Application with Docker","title":"Docker"},{"location":"tech-ops/docker/#docker","text":"Last updated on 10 Mar, 2019 In this section you will find my notes on using Docker for the deployment of Git projects.","title":"Docker"},{"location":"tech-ops/docker/#docker-and-github","text":"","title":"Docker and Github"},{"location":"tech-ops/docker/#deploy-script","text":"This script assumes that the working directory contains a .git directory, Dockerfile and package.json . A .gitignore and a .dockerignore file may be useful too. It is also assumed that the project dependencies have been installed using npm install . deploy.sh 1 2 3 4 5 6 7 8 9 10 IMAGE_NAME = \"<IMAGE>\" CONTAINER_NAME = \"<NAME>\" CONTAINER_PORT = \"<PORT_1>\" # To be mapped to HOST_PORT HOST_PORT = \"<PORT_2>\" # The port clients will access docker stop $CONTAINER_NAME docker system prune -af # Removes the container and all unused images git pull origin master # Pulls latest source files and image docker build -t $IMAGE_NAME . docker run --name $CONTAINER_NAME -p $CONTAINER_PORT : $HOST_PORT -d $IMAGE_NAME Before the script can be used, replace the following placeholders: <IMAGE> : The name of your image. <NAME> : The desired name of your container. <PORT_1> : The port of your container which your application is running on. <PORT_2> : The host port your container port will be mapped to.","title":"Deploy script"},{"location":"tech-ops/docker/#resources","text":"How To Build a Node.js Application with Docker","title":"Resources"},{"location":"tech-ops/heroku-quick-deploy/","text":"Heoroku-quick-deploy \u00b6 Last updated on 23 Feb, 2020 The purpose of this page is to quickly deploy code in an existing Git repository to Heroku. Warning This is a quick reference guide. It is not meant to be an informative tutorial. For more information, view the #Resources section. Steps \u00b6 Note It is assumed that Git and Heroku CLI has been installed. At the root of your Git repository, run the following commands: 1 2 3 4 5 # Create a new Heroku application. heroku create # Deploy to Heroku. git push heroku master Debug \u00b6 Missing Heroku remote repo \u00b6 Heroku remote repo not added as heroku automatically by heroku create command: 1 2 3 4 5 # Verify that 'heroku' has not been added git remote -v # If 'heroku' is not found in the remote list, add it git remote add heroku <link-to-the-Heroku-repo> Resources \u00b6 Heroku Dev Center's documentation for Deploying with Git : https://devcenter.heroku.com/articles/git","title":"Heroku-quick-deploy"},{"location":"tech-ops/heroku-quick-deploy/#heoroku-quick-deploy","text":"Last updated on 23 Feb, 2020 The purpose of this page is to quickly deploy code in an existing Git repository to Heroku. Warning This is a quick reference guide. It is not meant to be an informative tutorial. For more information, view the #Resources section.","title":"Heoroku-quick-deploy"},{"location":"tech-ops/heroku-quick-deploy/#steps","text":"Note It is assumed that Git and Heroku CLI has been installed. At the root of your Git repository, run the following commands: 1 2 3 4 5 # Create a new Heroku application. heroku create # Deploy to Heroku. git push heroku master","title":"Steps"},{"location":"tech-ops/heroku-quick-deploy/#debug","text":"","title":"Debug"},{"location":"tech-ops/heroku-quick-deploy/#missing-heroku-remote-repo","text":"Heroku remote repo not added as heroku automatically by heroku create command: 1 2 3 4 5 # Verify that 'heroku' has not been added git remote -v # If 'heroku' is not found in the remote list, add it git remote add heroku <link-to-the-Heroku-repo>","title":"Missing Heroku remote repo"},{"location":"tech-ops/heroku-quick-deploy/#resources","text":"Heroku Dev Center's documentation for Deploying with Git : https://devcenter.heroku.com/articles/git","title":"Resources"},{"location":"tech-ops/ubuntu18-04/","text":"Ubuntu 18.04 \u00b6 Last updated on 10 Mar, 2019 In this section you will find my notes on setting up and securing Ubuntu 18.04. Vim knowledge is assumed. Creating a new non-root Sudo user \u00b6 It is recommended to avoid using the root user account on a regular basis as it compromises security and is risky. Instead, create a new user account and add it to the sudo group. Add a new user \u00b6 1 adduser evan Add user to sudo group \u00b6 1 usermod -aG sudo evan Log in to user \u00b6 1 su evan Only allow Key Authentication \u00b6 Password-based authentication is susceptible to brute-force attacks. Thus, it is good practice to disable it and only allow key-based authentication. Add Public Key to User \u00b6 As mentioned, usage of the root user account should be avoided. Hence, it is advisable that you add your public key to the user account you created earlier on. It is assumed that you logged into your root account using SSH key. Create a authorized_keys file: 1 2 3 4 su evan cd ~ mkdir .ssh vim .ssh/authorized_keys Insert your public key and save the file with :wq! . You can copy this from the authorized_keys file under the root account's directory. You can find the file using the following commands: 1 2 3 su root cd ~ vim .ssh/authorized_keys Vim Tip Toggle visual mode by pressing v at the start of the line for the public key you wish to copy over. Press $ to move the cursor to the end of the line; doing so highlights the entire line. Press y to yank (copy). Then exit the file using :q! . Enter the destination authorized_keys file. Press p to paste what you yanked. Disable Password Authentication \u00b6 As it is assumed that you logged into your root account using SSH key, this step could be unnecessary. However, do still perform a check to verify that PasswordAuthentication no is in place. Open sshd_config with Vim: 1 sudo vim /etc/ssh/sshd_config Add PasswordAuthentication no . It might be commented out as #PasswordAuthentication no or written as PasswordAuthentication yes . If you find either, replace with PasswordAuthentication no . Else just add it in. Vim Tip Use :/PasswordAuthentication to find #PasswordAuthentication no . Save the file with :wq! . Restart ssh to implement this change: 1 sudo systemctl restart ssh Basic Firewall \u00b6 List application profiles registered with ufw firewall: 1 sudo ufw app list You should see 1 2 Available applications: OpenSSH Ensure the firewall allows SSH connections: 1 2 3 sudo ufw allow OpenSSH sudo ufw enable # Enable firewall sudo ufw status # Check if OpenSSH is allowed You should see the following after executing sudo ufw status : 1 2 3 4 To Action From -- ------ ---- OpenSSH ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) Resources \u00b6 Initial Server Setup with Ubuntu 18.04 How to Set Up SSH Keys on Ubuntu 18.04","title":"Ubuntu18-04"},{"location":"tech-ops/ubuntu18-04/#ubuntu-1804","text":"Last updated on 10 Mar, 2019 In this section you will find my notes on setting up and securing Ubuntu 18.04. Vim knowledge is assumed.","title":"Ubuntu 18.04"},{"location":"tech-ops/ubuntu18-04/#creating-a-new-non-root-sudo-user","text":"It is recommended to avoid using the root user account on a regular basis as it compromises security and is risky. Instead, create a new user account and add it to the sudo group.","title":"Creating a new non-root Sudo user"},{"location":"tech-ops/ubuntu18-04/#add-a-new-user","text":"1 adduser evan","title":"Add a new user"},{"location":"tech-ops/ubuntu18-04/#add-user-to-sudo-group","text":"1 usermod -aG sudo evan","title":"Add user to sudo group"},{"location":"tech-ops/ubuntu18-04/#log-in-to-user","text":"1 su evan","title":"Log in to user"},{"location":"tech-ops/ubuntu18-04/#only-allow-key-authentication","text":"Password-based authentication is susceptible to brute-force attacks. Thus, it is good practice to disable it and only allow key-based authentication.","title":"Only allow Key Authentication"},{"location":"tech-ops/ubuntu18-04/#add-public-key-to-user","text":"As mentioned, usage of the root user account should be avoided. Hence, it is advisable that you add your public key to the user account you created earlier on. It is assumed that you logged into your root account using SSH key. Create a authorized_keys file: 1 2 3 4 su evan cd ~ mkdir .ssh vim .ssh/authorized_keys Insert your public key and save the file with :wq! . You can copy this from the authorized_keys file under the root account's directory. You can find the file using the following commands: 1 2 3 su root cd ~ vim .ssh/authorized_keys Vim Tip Toggle visual mode by pressing v at the start of the line for the public key you wish to copy over. Press $ to move the cursor to the end of the line; doing so highlights the entire line. Press y to yank (copy). Then exit the file using :q! . Enter the destination authorized_keys file. Press p to paste what you yanked.","title":"Add Public Key to User"},{"location":"tech-ops/ubuntu18-04/#disable-password-authentication","text":"As it is assumed that you logged into your root account using SSH key, this step could be unnecessary. However, do still perform a check to verify that PasswordAuthentication no is in place. Open sshd_config with Vim: 1 sudo vim /etc/ssh/sshd_config Add PasswordAuthentication no . It might be commented out as #PasswordAuthentication no or written as PasswordAuthentication yes . If you find either, replace with PasswordAuthentication no . Else just add it in. Vim Tip Use :/PasswordAuthentication to find #PasswordAuthentication no . Save the file with :wq! . Restart ssh to implement this change: 1 sudo systemctl restart ssh","title":"Disable Password Authentication"},{"location":"tech-ops/ubuntu18-04/#basic-firewall","text":"List application profiles registered with ufw firewall: 1 sudo ufw app list You should see 1 2 Available applications: OpenSSH Ensure the firewall allows SSH connections: 1 2 3 sudo ufw allow OpenSSH sudo ufw enable # Enable firewall sudo ufw status # Check if OpenSSH is allowed You should see the following after executing sudo ufw status : 1 2 3 4 To Action From -- ------ ---- OpenSSH ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6)","title":"Basic Firewall"},{"location":"tech-ops/ubuntu18-04/#resources","text":"Initial Server Setup with Ubuntu 18.04 How to Set Up SSH Keys on Ubuntu 18.04","title":"Resources"}]}